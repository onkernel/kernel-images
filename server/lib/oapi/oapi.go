// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ClickMouseRequestButton.
const (
	Back    ClickMouseRequestButton = "back"
	Forward ClickMouseRequestButton = "forward"
	Left    ClickMouseRequestButton = "left"
	Middle  ClickMouseRequestButton = "middle"
	Right   ClickMouseRequestButton = "right"
)

// Defines values for ClickMouseRequestClickType.
const (
	Click ClickMouseRequestClickType = "click"
	Down  ClickMouseRequestClickType = "down"
	Up    ClickMouseRequestClickType = "up"
)

// Defines values for FileSystemEventType.
const (
	CREATE FileSystemEventType = "CREATE"
	DELETE FileSystemEventType = "DELETE"
	RENAME FileSystemEventType = "RENAME"
	WRITE  FileSystemEventType = "WRITE"
)

// ClickMouseRequest defines model for ClickMouseRequest.
type ClickMouseRequest struct {
	// Button Mouse button to interact with
	Button *ClickMouseRequestButton `json:"button,omitempty"`

	// ClickType Type of click action
	ClickType *ClickMouseRequestClickType `json:"click_type,omitempty"`

	// HoldKeys Modifier keys to hold during the click
	HoldKeys *[]string `json:"hold_keys,omitempty"`

	// NumClicks Number of times to repeat the click
	NumClicks *int `json:"num_clicks,omitempty"`

	// X X coordinate of the click position
	X int `json:"x"`

	// Y Y coordinate of the click position
	Y int `json:"y"`
}

// ClickMouseRequestButton Mouse button to interact with
type ClickMouseRequestButton string

// ClickMouseRequestClickType Type of click action
type ClickMouseRequestClickType string

// CreateDirectoryRequest defines model for CreateDirectoryRequest.
type CreateDirectoryRequest struct {
	// Mode Optional directory mode (octal string, e.g. 755). Defaults to 755.
	Mode *string `json:"mode,omitempty"`

	// Path Absolute directory path to create.
	Path string `json:"path"`
}

// DeletePathRequest defines model for DeletePathRequest.
type DeletePathRequest struct {
	// Path Absolute path to delete.
	Path string `json:"path"`
}

// DeleteRecordingRequest defines model for DeleteRecordingRequest.
type DeleteRecordingRequest struct {
	// Id Identifier of the recording to delete. Alphanumeric or hyphen.
	Id *string `json:"id,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// FileInfo defines model for FileInfo.
type FileInfo struct {
	// IsDir Whether the path is a directory.
	IsDir bool `json:"is_dir"`

	// ModTime Last modification time.
	ModTime time.Time `json:"mod_time"`

	// Mode File mode bits (e.g., "drwxr-xr-x" or "-rw-r--r--").
	Mode string `json:"mode"`

	// Name Base name of the file or directory.
	Name string `json:"name"`

	// Path Absolute path.
	Path string `json:"path"`

	// SizeBytes Size in bytes. 0 for directories.
	SizeBytes int `json:"size_bytes"`
}

// FileSystemEvent Filesystem change event.
type FileSystemEvent struct {
	// IsDir Whether the affected path is a directory.
	IsDir *bool `json:"is_dir,omitempty"`

	// Name Base name of the file or directory affected.
	Name *string `json:"name,omitempty"`

	// Path Absolute path of the file or directory.
	Path string `json:"path"`

	// Type Event type.
	Type FileSystemEventType `json:"type"`
}

// FileSystemEventType Event type.
type FileSystemEventType string

// ListFiles Array of file or directory information entries.
type ListFiles = []FileInfo

// MoveMouseRequest defines model for MoveMouseRequest.
type MoveMouseRequest struct {
	// HoldKeys Modifier keys to hold during the move
	HoldKeys *[]string `json:"hold_keys,omitempty"`

	// X X coordinate to move the cursor to
	X int `json:"x"`

	// Y Y coordinate to move the cursor to
	Y int `json:"y"`
}

// MovePathRequest defines model for MovePathRequest.
type MovePathRequest struct {
	// DestPath Absolute destination path.
	DestPath string `json:"dest_path"`

	// SrcPath Absolute source path.
	SrcPath string `json:"src_path"`
}

// RecorderInfo defines model for RecorderInfo.
type RecorderInfo struct {
	// FinishedAt Timestamp when recording finished
	FinishedAt  *time.Time `json:"finished_at"`
	Id          string     `json:"id"`
	IsRecording bool       `json:"isRecording"`

	// StartedAt Timestamp when recording started
	StartedAt *time.Time `json:"started_at"`
}

// SetFilePermissionsRequest defines model for SetFilePermissionsRequest.
type SetFilePermissionsRequest struct {
	// Group New group name or GID.
	Group *string `json:"group,omitempty"`

	// Mode File mode bits (octal string, e.g. 644).
	Mode string `json:"mode"`

	// Owner New owner username or UID.
	Owner *string `json:"owner,omitempty"`

	// Path Absolute path whose permissions are to be changed.
	Path string `json:"path"`
}

// StartFsWatchRequest defines model for StartFsWatchRequest.
type StartFsWatchRequest struct {
	// Path Directory to watch.
	Path string `json:"path"`

	// Recursive Whether to watch recursively.
	Recursive *bool `json:"recursive,omitempty"`
}

// StartRecordingRequest defines model for StartRecordingRequest.
type StartRecordingRequest struct {
	// Framerate Recording framerate in fps (overrides server default)
	Framerate *int `json:"framerate,omitempty"`

	// Id Optional identifier for the recording session. Alphanumeric or hyphen.
	Id *string `json:"id,omitempty"`

	// MaxDurationInSeconds Maximum recording duration in seconds (overrides server default)
	MaxDurationInSeconds *int `json:"maxDurationInSeconds,omitempty"`

	// MaxFileSizeInMB Maximum file size in MB (overrides server default)
	MaxFileSizeInMB *int `json:"maxFileSizeInMB,omitempty"`
}

// StopRecordingRequest defines model for StopRecordingRequest.
type StopRecordingRequest struct {
	// ForceStop Immediately stop without graceful shutdown. This may result in a corrupted video file.
	ForceStop *bool `json:"forceStop,omitempty"`

	// Id Identifier of the recorder to stop. Alphanumeric or hyphen.
	Id *string `json:"id,omitempty"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError = Error

// ConflictError defines model for ConflictError.
type ConflictError = Error

// InternalError defines model for InternalError.
type InternalError = Error

// NotFoundError defines model for NotFoundError.
type NotFoundError = Error

// FileInfoParams defines parameters for FileInfo.
type FileInfoParams struct {
	// Path Absolute path of the file or directory.
	Path string `form:"path" json:"path"`
}

// ListFilesParams defines parameters for ListFiles.
type ListFilesParams struct {
	// Path Absolute directory path.
	Path string `form:"path" json:"path"`
}

// ReadFileParams defines parameters for ReadFile.
type ReadFileParams struct {
	// Path Absolute file path to read.
	Path string `form:"path" json:"path"`
}

// WriteFileParams defines parameters for WriteFile.
type WriteFileParams struct {
	// Path Destination absolute file path.
	Path string `form:"path" json:"path"`

	// Mode Optional file mode (octal string, e.g. 644). Defaults to 644.
	Mode *string `form:"mode,omitempty" json:"mode,omitempty"`
}

// DownloadRecordingParams defines parameters for DownloadRecording.
type DownloadRecordingParams struct {
	// Id Optional recorder identifier. When omitted, the server uses the default recorder.
	Id *string `form:"id,omitempty" json:"id,omitempty"`
}

// ClickMouseJSONRequestBody defines body for ClickMouse for application/json ContentType.
type ClickMouseJSONRequestBody = ClickMouseRequest

// MoveMouseJSONRequestBody defines body for MoveMouse for application/json ContentType.
type MoveMouseJSONRequestBody = MoveMouseRequest

// CreateDirectoryJSONRequestBody defines body for CreateDirectory for application/json ContentType.
type CreateDirectoryJSONRequestBody = CreateDirectoryRequest

// DeleteDirectoryJSONRequestBody defines body for DeleteDirectory for application/json ContentType.
type DeleteDirectoryJSONRequestBody = DeletePathRequest

// DeleteFileJSONRequestBody defines body for DeleteFile for application/json ContentType.
type DeleteFileJSONRequestBody = DeletePathRequest

// MovePathJSONRequestBody defines body for MovePath for application/json ContentType.
type MovePathJSONRequestBody = MovePathRequest

// SetFilePermissionsJSONRequestBody defines body for SetFilePermissions for application/json ContentType.
type SetFilePermissionsJSONRequestBody = SetFilePermissionsRequest

// StartFsWatchJSONRequestBody defines body for StartFsWatch for application/json ContentType.
type StartFsWatchJSONRequestBody = StartFsWatchRequest

// DeleteRecordingJSONRequestBody defines body for DeleteRecording for application/json ContentType.
type DeleteRecordingJSONRequestBody = DeleteRecordingRequest

// StartRecordingJSONRequestBody defines body for StartRecording for application/json ContentType.
type StartRecordingJSONRequestBody = StartRecordingRequest

// StopRecordingJSONRequestBody defines body for StopRecording for application/json ContentType.
type StopRecordingJSONRequestBody = StopRecordingRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ClickMouseWithBody request with any body
	ClickMouseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClickMouse(ctx context.Context, body ClickMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveMouseWithBody request with any body
	MoveMouseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveMouse(ctx context.Context, body MoveMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDirectoryWithBody request with any body
	CreateDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDirectory(ctx context.Context, body CreateDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDirectoryWithBody request with any body
	DeleteDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteDirectory(ctx context.Context, body DeleteDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFileWithBody request with any body
	DeleteFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteFile(ctx context.Context, body DeleteFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FileInfo request
	FileInfo(ctx context.Context, params *FileInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFiles request
	ListFiles(ctx context.Context, params *ListFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MovePathWithBody request with any body
	MovePathWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MovePath(ctx context.Context, body MovePathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadFile request
	ReadFile(ctx context.Context, params *ReadFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetFilePermissionsWithBody request with any body
	SetFilePermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetFilePermissions(ctx context.Context, body SetFilePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartFsWatchWithBody request with any body
	StartFsWatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartFsWatch(ctx context.Context, body StartFsWatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopFsWatch request
	StopFsWatch(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StreamFsEvents request
	StreamFsEvents(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WriteFileWithBody request with any body
	WriteFileWithBody(ctx context.Context, params *WriteFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecordingWithBody request with any body
	DeleteRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRecording(ctx context.Context, body DeleteRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadRecording request
	DownloadRecording(ctx context.Context, params *DownloadRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRecorders request
	ListRecorders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartRecordingWithBody request with any body
	StartRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartRecording(ctx context.Context, body StartRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopRecordingWithBody request with any body
	StopRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StopRecording(ctx context.Context, body StopRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ClickMouseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClickMouseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClickMouse(ctx context.Context, body ClickMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClickMouseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveMouseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveMouseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveMouse(ctx context.Context, body MoveMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveMouseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDirectoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDirectory(ctx context.Context, body CreateDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDirectoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDirectoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDirectory(ctx context.Context, body DeleteDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDirectoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFile(ctx context.Context, body DeleteFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FileInfo(ctx context.Context, params *FileInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFileInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFiles(ctx context.Context, params *ListFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovePathWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovePathRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovePath(ctx context.Context, body MovePathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovePathRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadFile(ctx context.Context, params *ReadFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetFilePermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetFilePermissionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetFilePermissions(ctx context.Context, body SetFilePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetFilePermissionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartFsWatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartFsWatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartFsWatch(ctx context.Context, body StartFsWatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartFsWatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopFsWatch(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopFsWatchRequest(c.Server, watchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StreamFsEvents(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStreamFsEventsRequest(c.Server, watchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WriteFileWithBody(ctx context.Context, params *WriteFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWriteFileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecording(ctx context.Context, body DeleteRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadRecording(ctx context.Context, params *DownloadRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadRecordingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRecorders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRecordersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRecordingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRecording(ctx context.Context, body StartRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRecordingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopRecordingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopRecording(ctx context.Context, body StopRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopRecordingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewClickMouseRequest calls the generic ClickMouse builder with application/json body
func NewClickMouseRequest(server string, body ClickMouseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClickMouseRequestWithBody(server, "application/json", bodyReader)
}

// NewClickMouseRequestWithBody generates requests for ClickMouse with any type of body
func NewClickMouseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/computer/click_mouse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveMouseRequest calls the generic MoveMouse builder with application/json body
func NewMoveMouseRequest(server string, body MoveMouseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveMouseRequestWithBody(server, "application/json", bodyReader)
}

// NewMoveMouseRequestWithBody generates requests for MoveMouse with any type of body
func NewMoveMouseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/computer/move_mouse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDirectoryRequest calls the generic CreateDirectory builder with application/json body
func NewCreateDirectoryRequest(server string, body CreateDirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDirectoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDirectoryRequestWithBody generates requests for CreateDirectory with any type of body
func NewCreateDirectoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/create_directory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDirectoryRequest calls the generic DeleteDirectory builder with application/json body
func NewDeleteDirectoryRequest(server string, body DeleteDirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteDirectoryRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteDirectoryRequestWithBody generates requests for DeleteDirectory with any type of body
func NewDeleteDirectoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/delete_directory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFileRequest calls the generic DeleteFile builder with application/json body
func NewDeleteFileRequest(server string, body DeleteFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFileRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteFileRequestWithBody generates requests for DeleteFile with any type of body
func NewDeleteFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/delete_file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFileInfoRequest generates requests for FileInfo
func NewFileInfoRequest(server string, params *FileInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/file_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFilesRequest generates requests for ListFiles
func NewListFilesRequest(server string, params *ListFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/list_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMovePathRequest calls the generic MovePath builder with application/json body
func NewMovePathRequest(server string, body MovePathJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMovePathRequestWithBody(server, "application/json", bodyReader)
}

// NewMovePathRequestWithBody generates requests for MovePath with any type of body
func NewMovePathRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadFileRequest generates requests for ReadFile
func NewReadFileRequest(server string, params *ReadFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/read_file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetFilePermissionsRequest calls the generic SetFilePermissions builder with application/json body
func NewSetFilePermissionsRequest(server string, body SetFilePermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetFilePermissionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSetFilePermissionsRequestWithBody generates requests for SetFilePermissions with any type of body
func NewSetFilePermissionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/set_file_permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartFsWatchRequest calls the generic StartFsWatch builder with application/json body
func NewStartFsWatchRequest(server string, body StartFsWatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartFsWatchRequestWithBody(server, "application/json", bodyReader)
}

// NewStartFsWatchRequestWithBody generates requests for StartFsWatch with any type of body
func NewStartFsWatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/watch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStopFsWatchRequest generates requests for StopFsWatch
func NewStopFsWatchRequest(server string, watchId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "watch_id", runtime.ParamLocationPath, watchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/watch/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStreamFsEventsRequest generates requests for StreamFsEvents
func NewStreamFsEventsRequest(server string, watchId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "watch_id", runtime.ParamLocationPath, watchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/watch/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWriteFileRequestWithBody generates requests for WriteFile with any type of body
func NewWriteFileRequestWithBody(server string, params *WriteFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/write_file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRecordingRequest calls the generic DeleteRecording builder with application/json body
func NewDeleteRecordingRequest(server string, body DeleteRecordingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRecordingRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRecordingRequestWithBody generates requests for DeleteRecording with any type of body
func NewDeleteRecordingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDownloadRecordingRequest generates requests for DownloadRecording
func NewDownloadRecordingRequest(server string, params *DownloadRecordingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRecordersRequest generates requests for ListRecorders
func NewListRecordersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartRecordingRequest calls the generic StartRecording builder with application/json body
func NewStartRecordingRequest(server string, body StartRecordingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartRecordingRequestWithBody(server, "application/json", bodyReader)
}

// NewStartRecordingRequestWithBody generates requests for StartRecording with any type of body
func NewStartRecordingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStopRecordingRequest calls the generic StopRecording builder with application/json body
func NewStopRecordingRequest(server string, body StopRecordingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStopRecordingRequestWithBody(server, "application/json", bodyReader)
}

// NewStopRecordingRequestWithBody generates requests for StopRecording with any type of body
func NewStopRecordingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ClickMouseWithBodyWithResponse request with any body
	ClickMouseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClickMouseResponse, error)

	ClickMouseWithResponse(ctx context.Context, body ClickMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*ClickMouseResponse, error)

	// MoveMouseWithBodyWithResponse request with any body
	MoveMouseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveMouseResponse, error)

	MoveMouseWithResponse(ctx context.Context, body MoveMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveMouseResponse, error)

	// CreateDirectoryWithBodyWithResponse request with any body
	CreateDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDirectoryResponse, error)

	CreateDirectoryWithResponse(ctx context.Context, body CreateDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDirectoryResponse, error)

	// DeleteDirectoryWithBodyWithResponse request with any body
	DeleteDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDirectoryResponse, error)

	DeleteDirectoryWithResponse(ctx context.Context, body DeleteDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDirectoryResponse, error)

	// DeleteFileWithBodyWithResponse request with any body
	DeleteFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error)

	DeleteFileWithResponse(ctx context.Context, body DeleteFileJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error)

	// FileInfoWithResponse request
	FileInfoWithResponse(ctx context.Context, params *FileInfoParams, reqEditors ...RequestEditorFn) (*FileInfoResponse, error)

	// ListFilesWithResponse request
	ListFilesWithResponse(ctx context.Context, params *ListFilesParams, reqEditors ...RequestEditorFn) (*ListFilesResponse, error)

	// MovePathWithBodyWithResponse request with any body
	MovePathWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MovePathResponse, error)

	MovePathWithResponse(ctx context.Context, body MovePathJSONRequestBody, reqEditors ...RequestEditorFn) (*MovePathResponse, error)

	// ReadFileWithResponse request
	ReadFileWithResponse(ctx context.Context, params *ReadFileParams, reqEditors ...RequestEditorFn) (*ReadFileResponse, error)

	// SetFilePermissionsWithBodyWithResponse request with any body
	SetFilePermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetFilePermissionsResponse, error)

	SetFilePermissionsWithResponse(ctx context.Context, body SetFilePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetFilePermissionsResponse, error)

	// StartFsWatchWithBodyWithResponse request with any body
	StartFsWatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartFsWatchResponse, error)

	StartFsWatchWithResponse(ctx context.Context, body StartFsWatchJSONRequestBody, reqEditors ...RequestEditorFn) (*StartFsWatchResponse, error)

	// StopFsWatchWithResponse request
	StopFsWatchWithResponse(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*StopFsWatchResponse, error)

	// StreamFsEventsWithResponse request
	StreamFsEventsWithResponse(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*StreamFsEventsResponse, error)

	// WriteFileWithBodyWithResponse request with any body
	WriteFileWithBodyWithResponse(ctx context.Context, params *WriteFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WriteFileResponse, error)

	// DeleteRecordingWithBodyWithResponse request with any body
	DeleteRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error)

	DeleteRecordingWithResponse(ctx context.Context, body DeleteRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error)

	// DownloadRecordingWithResponse request
	DownloadRecordingWithResponse(ctx context.Context, params *DownloadRecordingParams, reqEditors ...RequestEditorFn) (*DownloadRecordingResponse, error)

	// ListRecordersWithResponse request
	ListRecordersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRecordersResponse, error)

	// StartRecordingWithBodyWithResponse request with any body
	StartRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRecordingResponse, error)

	StartRecordingWithResponse(ctx context.Context, body StartRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRecordingResponse, error)

	// StopRecordingWithBodyWithResponse request with any body
	StopRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopRecordingResponse, error)

	StopRecordingWithResponse(ctx context.Context, body StopRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*StopRecordingResponse, error)
}

type ClickMouseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ClickMouseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClickMouseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveMouseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r MoveMouseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveMouseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r CreateDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DeleteDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DeleteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FileInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileInfo
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r FileInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FileInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFiles
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ListFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MovePathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r MovePathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MovePathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ReadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetFilePermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r SetFilePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetFilePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartFsWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// WatchId Unique identifier for the directory watch
		WatchId *string `json:"watch_id,omitempty"`
	}
	JSON400 *BadRequestError
	JSON404 *NotFoundError
	JSON500 *InternalError
}

// Status returns HTTPResponse.Status
func (r StartFsWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartFsWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopFsWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r StopFsWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopFsWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StreamFsEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r StreamFsEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StreamFsEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WriteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r WriteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WriteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DeleteRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DownloadRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRecordersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RecorderInfo
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ListRecordersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRecordersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON409      *ConflictError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r StartRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r StopRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ClickMouseWithBodyWithResponse request with arbitrary body returning *ClickMouseResponse
func (c *ClientWithResponses) ClickMouseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClickMouseResponse, error) {
	rsp, err := c.ClickMouseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClickMouseResponse(rsp)
}

func (c *ClientWithResponses) ClickMouseWithResponse(ctx context.Context, body ClickMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*ClickMouseResponse, error) {
	rsp, err := c.ClickMouse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClickMouseResponse(rsp)
}

// MoveMouseWithBodyWithResponse request with arbitrary body returning *MoveMouseResponse
func (c *ClientWithResponses) MoveMouseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveMouseResponse, error) {
	rsp, err := c.MoveMouseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveMouseResponse(rsp)
}

func (c *ClientWithResponses) MoveMouseWithResponse(ctx context.Context, body MoveMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveMouseResponse, error) {
	rsp, err := c.MoveMouse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveMouseResponse(rsp)
}

// CreateDirectoryWithBodyWithResponse request with arbitrary body returning *CreateDirectoryResponse
func (c *ClientWithResponses) CreateDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDirectoryResponse, error) {
	rsp, err := c.CreateDirectoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDirectoryResponse(rsp)
}

func (c *ClientWithResponses) CreateDirectoryWithResponse(ctx context.Context, body CreateDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDirectoryResponse, error) {
	rsp, err := c.CreateDirectory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDirectoryResponse(rsp)
}

// DeleteDirectoryWithBodyWithResponse request with arbitrary body returning *DeleteDirectoryResponse
func (c *ClientWithResponses) DeleteDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDirectoryResponse, error) {
	rsp, err := c.DeleteDirectoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDirectoryResponse(rsp)
}

func (c *ClientWithResponses) DeleteDirectoryWithResponse(ctx context.Context, body DeleteDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDirectoryResponse, error) {
	rsp, err := c.DeleteDirectory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDirectoryResponse(rsp)
}

// DeleteFileWithBodyWithResponse request with arbitrary body returning *DeleteFileResponse
func (c *ClientWithResponses) DeleteFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error) {
	rsp, err := c.DeleteFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileResponse(rsp)
}

func (c *ClientWithResponses) DeleteFileWithResponse(ctx context.Context, body DeleteFileJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error) {
	rsp, err := c.DeleteFile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileResponse(rsp)
}

// FileInfoWithResponse request returning *FileInfoResponse
func (c *ClientWithResponses) FileInfoWithResponse(ctx context.Context, params *FileInfoParams, reqEditors ...RequestEditorFn) (*FileInfoResponse, error) {
	rsp, err := c.FileInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFileInfoResponse(rsp)
}

// ListFilesWithResponse request returning *ListFilesResponse
func (c *ClientWithResponses) ListFilesWithResponse(ctx context.Context, params *ListFilesParams, reqEditors ...RequestEditorFn) (*ListFilesResponse, error) {
	rsp, err := c.ListFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFilesResponse(rsp)
}

// MovePathWithBodyWithResponse request with arbitrary body returning *MovePathResponse
func (c *ClientWithResponses) MovePathWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MovePathResponse, error) {
	rsp, err := c.MovePathWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovePathResponse(rsp)
}

func (c *ClientWithResponses) MovePathWithResponse(ctx context.Context, body MovePathJSONRequestBody, reqEditors ...RequestEditorFn) (*MovePathResponse, error) {
	rsp, err := c.MovePath(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovePathResponse(rsp)
}

// ReadFileWithResponse request returning *ReadFileResponse
func (c *ClientWithResponses) ReadFileWithResponse(ctx context.Context, params *ReadFileParams, reqEditors ...RequestEditorFn) (*ReadFileResponse, error) {
	rsp, err := c.ReadFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadFileResponse(rsp)
}

// SetFilePermissionsWithBodyWithResponse request with arbitrary body returning *SetFilePermissionsResponse
func (c *ClientWithResponses) SetFilePermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetFilePermissionsResponse, error) {
	rsp, err := c.SetFilePermissionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetFilePermissionsResponse(rsp)
}

func (c *ClientWithResponses) SetFilePermissionsWithResponse(ctx context.Context, body SetFilePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetFilePermissionsResponse, error) {
	rsp, err := c.SetFilePermissions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetFilePermissionsResponse(rsp)
}

// StartFsWatchWithBodyWithResponse request with arbitrary body returning *StartFsWatchResponse
func (c *ClientWithResponses) StartFsWatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartFsWatchResponse, error) {
	rsp, err := c.StartFsWatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartFsWatchResponse(rsp)
}

func (c *ClientWithResponses) StartFsWatchWithResponse(ctx context.Context, body StartFsWatchJSONRequestBody, reqEditors ...RequestEditorFn) (*StartFsWatchResponse, error) {
	rsp, err := c.StartFsWatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartFsWatchResponse(rsp)
}

// StopFsWatchWithResponse request returning *StopFsWatchResponse
func (c *ClientWithResponses) StopFsWatchWithResponse(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*StopFsWatchResponse, error) {
	rsp, err := c.StopFsWatch(ctx, watchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopFsWatchResponse(rsp)
}

// StreamFsEventsWithResponse request returning *StreamFsEventsResponse
func (c *ClientWithResponses) StreamFsEventsWithResponse(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*StreamFsEventsResponse, error) {
	rsp, err := c.StreamFsEvents(ctx, watchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStreamFsEventsResponse(rsp)
}

// WriteFileWithBodyWithResponse request with arbitrary body returning *WriteFileResponse
func (c *ClientWithResponses) WriteFileWithBodyWithResponse(ctx context.Context, params *WriteFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WriteFileResponse, error) {
	rsp, err := c.WriteFileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWriteFileResponse(rsp)
}

// DeleteRecordingWithBodyWithResponse request with arbitrary body returning *DeleteRecordingResponse
func (c *ClientWithResponses) DeleteRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error) {
	rsp, err := c.DeleteRecordingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingResponse(rsp)
}

func (c *ClientWithResponses) DeleteRecordingWithResponse(ctx context.Context, body DeleteRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error) {
	rsp, err := c.DeleteRecording(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingResponse(rsp)
}

// DownloadRecordingWithResponse request returning *DownloadRecordingResponse
func (c *ClientWithResponses) DownloadRecordingWithResponse(ctx context.Context, params *DownloadRecordingParams, reqEditors ...RequestEditorFn) (*DownloadRecordingResponse, error) {
	rsp, err := c.DownloadRecording(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadRecordingResponse(rsp)
}

// ListRecordersWithResponse request returning *ListRecordersResponse
func (c *ClientWithResponses) ListRecordersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRecordersResponse, error) {
	rsp, err := c.ListRecorders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRecordersResponse(rsp)
}

// StartRecordingWithBodyWithResponse request with arbitrary body returning *StartRecordingResponse
func (c *ClientWithResponses) StartRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRecordingResponse, error) {
	rsp, err := c.StartRecordingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRecordingResponse(rsp)
}

func (c *ClientWithResponses) StartRecordingWithResponse(ctx context.Context, body StartRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRecordingResponse, error) {
	rsp, err := c.StartRecording(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRecordingResponse(rsp)
}

// StopRecordingWithBodyWithResponse request with arbitrary body returning *StopRecordingResponse
func (c *ClientWithResponses) StopRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopRecordingResponse, error) {
	rsp, err := c.StopRecordingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopRecordingResponse(rsp)
}

func (c *ClientWithResponses) StopRecordingWithResponse(ctx context.Context, body StopRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*StopRecordingResponse, error) {
	rsp, err := c.StopRecording(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopRecordingResponse(rsp)
}

// ParseClickMouseResponse parses an HTTP response from a ClickMouseWithResponse call
func ParseClickMouseResponse(rsp *http.Response) (*ClickMouseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClickMouseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMoveMouseResponse parses an HTTP response from a MoveMouseWithResponse call
func ParseMoveMouseResponse(rsp *http.Response) (*MoveMouseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveMouseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDirectoryResponse parses an HTTP response from a CreateDirectoryWithResponse call
func ParseCreateDirectoryResponse(rsp *http.Response) (*CreateDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDirectoryResponse parses an HTTP response from a DeleteDirectoryWithResponse call
func ParseDeleteDirectoryResponse(rsp *http.Response) (*DeleteDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFileResponse parses an HTTP response from a DeleteFileWithResponse call
func ParseDeleteFileResponse(rsp *http.Response) (*DeleteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFileInfoResponse parses an HTTP response from a FileInfoWithResponse call
func ParseFileInfoResponse(rsp *http.Response) (*FileInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FileInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListFilesResponse parses an HTTP response from a ListFilesWithResponse call
func ParseListFilesResponse(rsp *http.Response) (*ListFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMovePathResponse parses an HTTP response from a MovePathWithResponse call
func ParseMovePathResponse(rsp *http.Response) (*MovePathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MovePathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReadFileResponse parses an HTTP response from a ReadFileWithResponse call
func ParseReadFileResponse(rsp *http.Response) (*ReadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSetFilePermissionsResponse parses an HTTP response from a SetFilePermissionsWithResponse call
func ParseSetFilePermissionsResponse(rsp *http.Response) (*SetFilePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetFilePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartFsWatchResponse parses an HTTP response from a StartFsWatchWithResponse call
func ParseStartFsWatchResponse(rsp *http.Response) (*StartFsWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartFsWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// WatchId Unique identifier for the directory watch
			WatchId *string `json:"watch_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStopFsWatchResponse parses an HTTP response from a StopFsWatchWithResponse call
func ParseStopFsWatchResponse(rsp *http.Response) (*StopFsWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopFsWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStreamFsEventsResponse parses an HTTP response from a StreamFsEventsWithResponse call
func ParseStreamFsEventsResponse(rsp *http.Response) (*StreamFsEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StreamFsEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseWriteFileResponse parses an HTTP response from a WriteFileWithResponse call
func ParseWriteFileResponse(rsp *http.Response) (*WriteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WriteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRecordingResponse parses an HTTP response from a DeleteRecordingWithResponse call
func ParseDeleteRecordingResponse(rsp *http.Response) (*DeleteRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadRecordingResponse parses an HTTP response from a DownloadRecordingWithResponse call
func ParseDownloadRecordingResponse(rsp *http.Response) (*DownloadRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListRecordersResponse parses an HTTP response from a ListRecordersWithResponse call
func ParseListRecordersResponse(rsp *http.Response) (*ListRecordersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRecordersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RecorderInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartRecordingResponse parses an HTTP response from a StartRecordingWithResponse call
func ParseStartRecordingResponse(rsp *http.Response) (*StartRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStopRecordingResponse parses an HTTP response from a StopRecordingWithResponse call
func ParseStopRecordingResponse(rsp *http.Response) (*StopRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulate a mouse click action on the host computer
	// (POST /computer/click_mouse)
	ClickMouse(w http.ResponseWriter, r *http.Request)
	// Move the mouse cursor to the specified coordinates on the host computer
	// (POST /computer/move_mouse)
	MoveMouse(w http.ResponseWriter, r *http.Request)
	// Create a new directory
	// (POST /fs/create_directory)
	CreateDirectory(w http.ResponseWriter, r *http.Request)
	// Delete a directory
	// (POST /fs/delete_directory)
	DeleteDirectory(w http.ResponseWriter, r *http.Request)
	// Delete a file
	// (POST /fs/delete_file)
	DeleteFile(w http.ResponseWriter, r *http.Request)
	// Get information about a file or directory
	// (GET /fs/file_info)
	FileInfo(w http.ResponseWriter, r *http.Request, params FileInfoParams)
	// List files in a directory
	// (GET /fs/list_files)
	ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams)
	// Move or rename a file or directory
	// (POST /fs/move)
	MovePath(w http.ResponseWriter, r *http.Request)
	// Read file contents
	// (GET /fs/read_file)
	ReadFile(w http.ResponseWriter, r *http.Request, params ReadFileParams)
	// Set file or directory permissions/ownership
	// (POST /fs/set_file_permissions)
	SetFilePermissions(w http.ResponseWriter, r *http.Request)
	// Watch a directory for changes
	// (POST /fs/watch)
	StartFsWatch(w http.ResponseWriter, r *http.Request)
	// Stop watching a directory
	// (DELETE /fs/watch/{watch_id})
	StopFsWatch(w http.ResponseWriter, r *http.Request, watchId string)
	// Stream filesystem events for a watch
	// (GET /fs/watch/{watch_id}/events)
	StreamFsEvents(w http.ResponseWriter, r *http.Request, watchId string)
	// Write or create a file
	// (POST /fs/write_file)
	WriteFile(w http.ResponseWriter, r *http.Request, params WriteFileParams)
	// Delete a previously recorded video file
	// (POST /recording/delete)
	DeleteRecording(w http.ResponseWriter, r *http.Request)
	// Download the most recently recorded video file
	// (GET /recording/download)
	DownloadRecording(w http.ResponseWriter, r *http.Request, params DownloadRecordingParams)
	// List all recorders
	// (GET /recording/list)
	ListRecorders(w http.ResponseWriter, r *http.Request)
	// Start a screen recording. Only one recording per ID can be registered at a time.
	// (POST /recording/start)
	StartRecording(w http.ResponseWriter, r *http.Request)
	// Stop the recording
	// (POST /recording/stop)
	StopRecording(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Simulate a mouse click action on the host computer
// (POST /computer/click_mouse)
func (_ Unimplemented) ClickMouse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move the mouse cursor to the specified coordinates on the host computer
// (POST /computer/move_mouse)
func (_ Unimplemented) MoveMouse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new directory
// (POST /fs/create_directory)
func (_ Unimplemented) CreateDirectory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a directory
// (POST /fs/delete_directory)
func (_ Unimplemented) DeleteDirectory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a file
// (POST /fs/delete_file)
func (_ Unimplemented) DeleteFile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get information about a file or directory
// (GET /fs/file_info)
func (_ Unimplemented) FileInfo(w http.ResponseWriter, r *http.Request, params FileInfoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List files in a directory
// (GET /fs/list_files)
func (_ Unimplemented) ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move or rename a file or directory
// (POST /fs/move)
func (_ Unimplemented) MovePath(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read file contents
// (GET /fs/read_file)
func (_ Unimplemented) ReadFile(w http.ResponseWriter, r *http.Request, params ReadFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set file or directory permissions/ownership
// (POST /fs/set_file_permissions)
func (_ Unimplemented) SetFilePermissions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Watch a directory for changes
// (POST /fs/watch)
func (_ Unimplemented) StartFsWatch(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stop watching a directory
// (DELETE /fs/watch/{watch_id})
func (_ Unimplemented) StopFsWatch(w http.ResponseWriter, r *http.Request, watchId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stream filesystem events for a watch
// (GET /fs/watch/{watch_id}/events)
func (_ Unimplemented) StreamFsEvents(w http.ResponseWriter, r *http.Request, watchId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write or create a file
// (POST /fs/write_file)
func (_ Unimplemented) WriteFile(w http.ResponseWriter, r *http.Request, params WriteFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a previously recorded video file
// (POST /recording/delete)
func (_ Unimplemented) DeleteRecording(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Download the most recently recorded video file
// (GET /recording/download)
func (_ Unimplemented) DownloadRecording(w http.ResponseWriter, r *http.Request, params DownloadRecordingParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all recorders
// (GET /recording/list)
func (_ Unimplemented) ListRecorders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Start a screen recording. Only one recording per ID can be registered at a time.
// (POST /recording/start)
func (_ Unimplemented) StartRecording(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stop the recording
// (POST /recording/stop)
func (_ Unimplemented) StopRecording(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ClickMouse operation middleware
func (siw *ServerInterfaceWrapper) ClickMouse(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClickMouse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MoveMouse operation middleware
func (siw *ServerInterfaceWrapper) MoveMouse(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveMouse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDirectory operation middleware
func (siw *ServerInterfaceWrapper) CreateDirectory(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDirectory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDirectory operation middleware
func (siw *ServerInterfaceWrapper) DeleteDirectory(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDirectory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FileInfo operation middleware
func (siw *ServerInterfaceWrapper) FileInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FileInfoParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FileInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFilesParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MovePath operation middleware
func (siw *ServerInterfaceWrapper) MovePath(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MovePath(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadFile operation middleware
func (siw *ServerInterfaceWrapper) ReadFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadFileParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadFile(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetFilePermissions operation middleware
func (siw *ServerInterfaceWrapper) SetFilePermissions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetFilePermissions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StartFsWatch operation middleware
func (siw *ServerInterfaceWrapper) StartFsWatch(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartFsWatch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StopFsWatch operation middleware
func (siw *ServerInterfaceWrapper) StopFsWatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "watch_id" -------------
	var watchId string

	err = runtime.BindStyledParameterWithOptions("simple", "watch_id", chi.URLParam(r, "watch_id"), &watchId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "watch_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopFsWatch(w, r, watchId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StreamFsEvents operation middleware
func (siw *ServerInterfaceWrapper) StreamFsEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "watch_id" -------------
	var watchId string

	err = runtime.BindStyledParameterWithOptions("simple", "watch_id", chi.URLParam(r, "watch_id"), &watchId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "watch_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StreamFsEvents(w, r, watchId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// WriteFile operation middleware
func (siw *ServerInterfaceWrapper) WriteFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WriteFileParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "mode", r.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WriteFile(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteRecording operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecording(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRecording(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DownloadRecording operation middleware
func (siw *ServerInterfaceWrapper) DownloadRecording(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DownloadRecordingParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadRecording(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRecorders operation middleware
func (siw *ServerInterfaceWrapper) ListRecorders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRecorders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StartRecording operation middleware
func (siw *ServerInterfaceWrapper) StartRecording(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartRecording(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StopRecording operation middleware
func (siw *ServerInterfaceWrapper) StopRecording(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopRecording(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/computer/click_mouse", wrapper.ClickMouse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/computer/move_mouse", wrapper.MoveMouse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/create_directory", wrapper.CreateDirectory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/delete_directory", wrapper.DeleteDirectory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/delete_file", wrapper.DeleteFile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/file_info", wrapper.FileInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/list_files", wrapper.ListFiles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/move", wrapper.MovePath)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/read_file", wrapper.ReadFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/set_file_permissions", wrapper.SetFilePermissions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/watch", wrapper.StartFsWatch)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/fs/watch/{watch_id}", wrapper.StopFsWatch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/watch/{watch_id}/events", wrapper.StreamFsEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/write_file", wrapper.WriteFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recording/delete", wrapper.DeleteRecording)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recording/download", wrapper.DownloadRecording)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recording/list", wrapper.ListRecorders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recording/start", wrapper.StartRecording)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recording/stop", wrapper.StopRecording)
	})

	return r
}

type BadRequestErrorJSONResponse Error

type ConflictErrorJSONResponse Error

type InternalErrorJSONResponse Error

type NotFoundErrorJSONResponse Error

type ClickMouseRequestObject struct {
	Body *ClickMouseJSONRequestBody
}

type ClickMouseResponseObject interface {
	VisitClickMouseResponse(w http.ResponseWriter) error
}

type ClickMouse200Response struct {
}

func (response ClickMouse200Response) VisitClickMouseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ClickMouse400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ClickMouse400JSONResponse) VisitClickMouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClickMouse500JSONResponse struct{ InternalErrorJSONResponse }

func (response ClickMouse500JSONResponse) VisitClickMouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MoveMouseRequestObject struct {
	Body *MoveMouseJSONRequestBody
}

type MoveMouseResponseObject interface {
	VisitMoveMouseResponse(w http.ResponseWriter) error
}

type MoveMouse200Response struct {
}

func (response MoveMouse200Response) VisitMoveMouseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MoveMouse400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response MoveMouse400JSONResponse) VisitMoveMouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type MoveMouse500JSONResponse struct{ InternalErrorJSONResponse }

func (response MoveMouse500JSONResponse) VisitMoveMouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateDirectoryRequestObject struct {
	Body *CreateDirectoryJSONRequestBody
}

type CreateDirectoryResponseObject interface {
	VisitCreateDirectoryResponse(w http.ResponseWriter) error
}

type CreateDirectory201Response struct {
}

func (response CreateDirectory201Response) VisitCreateDirectoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateDirectory400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateDirectory400JSONResponse) VisitCreateDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDirectory500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateDirectory500JSONResponse) VisitCreateDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDirectoryRequestObject struct {
	Body *DeleteDirectoryJSONRequestBody
}

type DeleteDirectoryResponseObject interface {
	VisitDeleteDirectoryResponse(w http.ResponseWriter) error
}

type DeleteDirectory200Response struct {
}

func (response DeleteDirectory200Response) VisitDeleteDirectoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteDirectory400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteDirectory400JSONResponse) VisitDeleteDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDirectory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteDirectory404JSONResponse) VisitDeleteDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDirectory500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteDirectory500JSONResponse) VisitDeleteDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFileRequestObject struct {
	Body *DeleteFileJSONRequestBody
}

type DeleteFileResponseObject interface {
	VisitDeleteFileResponse(w http.ResponseWriter) error
}

type DeleteFile200Response struct {
}

func (response DeleteFile200Response) VisitDeleteFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFile400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteFile400JSONResponse) VisitDeleteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFile404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteFile404JSONResponse) VisitDeleteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFile500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteFile500JSONResponse) VisitDeleteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type FileInfoRequestObject struct {
	Params FileInfoParams
}

type FileInfoResponseObject interface {
	VisitFileInfoResponse(w http.ResponseWriter) error
}

type FileInfo200JSONResponse FileInfo

func (response FileInfo200JSONResponse) VisitFileInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FileInfo400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response FileInfo400JSONResponse) VisitFileInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FileInfo404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response FileInfo404JSONResponse) VisitFileInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FileInfo500JSONResponse struct{ InternalErrorJSONResponse }

func (response FileInfo500JSONResponse) VisitFileInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListFilesRequestObject struct {
	Params ListFilesParams
}

type ListFilesResponseObject interface {
	VisitListFilesResponse(w http.ResponseWriter) error
}

type ListFiles200JSONResponse ListFiles

func (response ListFiles200JSONResponse) VisitListFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFiles400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ListFiles400JSONResponse) VisitListFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListFiles404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListFiles404JSONResponse) VisitListFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListFiles500JSONResponse struct{ InternalErrorJSONResponse }

func (response ListFiles500JSONResponse) VisitListFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MovePathRequestObject struct {
	Body *MovePathJSONRequestBody
}

type MovePathResponseObject interface {
	VisitMovePathResponse(w http.ResponseWriter) error
}

type MovePath200Response struct {
}

func (response MovePath200Response) VisitMovePathResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MovePath400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response MovePath400JSONResponse) VisitMovePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type MovePath404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response MovePath404JSONResponse) VisitMovePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MovePath500JSONResponse struct{ InternalErrorJSONResponse }

func (response MovePath500JSONResponse) VisitMovePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadFileRequestObject struct {
	Params ReadFileParams
}

type ReadFileResponseObject interface {
	VisitReadFileResponse(w http.ResponseWriter) error
}

type ReadFile200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReadFile200ApplicationoctetStreamResponse) VisitReadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReadFile400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ReadFile400JSONResponse) VisitReadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadFile404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ReadFile404JSONResponse) VisitReadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadFile500JSONResponse struct{ InternalErrorJSONResponse }

func (response ReadFile500JSONResponse) VisitReadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SetFilePermissionsRequestObject struct {
	Body *SetFilePermissionsJSONRequestBody
}

type SetFilePermissionsResponseObject interface {
	VisitSetFilePermissionsResponse(w http.ResponseWriter) error
}

type SetFilePermissions200Response struct {
}

func (response SetFilePermissions200Response) VisitSetFilePermissionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetFilePermissions400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response SetFilePermissions400JSONResponse) VisitSetFilePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetFilePermissions404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response SetFilePermissions404JSONResponse) VisitSetFilePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SetFilePermissions500JSONResponse struct{ InternalErrorJSONResponse }

func (response SetFilePermissions500JSONResponse) VisitSetFilePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StartFsWatchRequestObject struct {
	Body *StartFsWatchJSONRequestBody
}

type StartFsWatchResponseObject interface {
	VisitStartFsWatchResponse(w http.ResponseWriter) error
}

type StartFsWatch201JSONResponse struct {
	// WatchId Unique identifier for the directory watch
	WatchId *string `json:"watch_id,omitempty"`
}

func (response StartFsWatch201JSONResponse) VisitStartFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type StartFsWatch400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StartFsWatch400JSONResponse) VisitStartFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StartFsWatch404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response StartFsWatch404JSONResponse) VisitStartFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StartFsWatch500JSONResponse struct{ InternalErrorJSONResponse }

func (response StartFsWatch500JSONResponse) VisitStartFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StopFsWatchRequestObject struct {
	WatchId string `json:"watch_id"`
}

type StopFsWatchResponseObject interface {
	VisitStopFsWatchResponse(w http.ResponseWriter) error
}

type StopFsWatch204Response struct {
}

func (response StopFsWatch204Response) VisitStopFsWatchResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type StopFsWatch400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StopFsWatch400JSONResponse) VisitStopFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StopFsWatch404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response StopFsWatch404JSONResponse) VisitStopFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StopFsWatch500JSONResponse struct{ InternalErrorJSONResponse }

func (response StopFsWatch500JSONResponse) VisitStopFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StreamFsEventsRequestObject struct {
	WatchId string `json:"watch_id"`
}

type StreamFsEventsResponseObject interface {
	VisitStreamFsEventsResponse(w http.ResponseWriter) error
}

type StreamFsEvents200ResponseHeaders struct {
	XSSEContentType string
}

type StreamFsEvents200TexteventStreamResponse struct {
	Body          io.Reader
	Headers       StreamFsEvents200ResponseHeaders
	ContentLength int64
}

func (response StreamFsEvents200TexteventStreamResponse) VisitStreamFsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-SSE-Content-Type", fmt.Sprint(response.Headers.XSSEContentType))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type StreamFsEvents400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StreamFsEvents400JSONResponse) VisitStreamFsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StreamFsEvents404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response StreamFsEvents404JSONResponse) VisitStreamFsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StreamFsEvents500JSONResponse struct{ InternalErrorJSONResponse }

func (response StreamFsEvents500JSONResponse) VisitStreamFsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type WriteFileRequestObject struct {
	Params WriteFileParams
	Body   io.Reader
}

type WriteFileResponseObject interface {
	VisitWriteFileResponse(w http.ResponseWriter) error
}

type WriteFile201Response struct {
}

func (response WriteFile201Response) VisitWriteFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type WriteFile400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response WriteFile400JSONResponse) VisitWriteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WriteFile404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response WriteFile404JSONResponse) VisitWriteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WriteFile500JSONResponse struct{ InternalErrorJSONResponse }

func (response WriteFile500JSONResponse) VisitWriteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecordingRequestObject struct {
	Body *DeleteRecordingJSONRequestBody
}

type DeleteRecordingResponseObject interface {
	VisitDeleteRecordingResponse(w http.ResponseWriter) error
}

type DeleteRecording200Response struct {
}

func (response DeleteRecording200Response) VisitDeleteRecordingResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRecording400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteRecording400JSONResponse) VisitDeleteRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecording404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteRecording404JSONResponse) VisitDeleteRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecording500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteRecording500JSONResponse) VisitDeleteRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DownloadRecordingRequestObject struct {
	Params DownloadRecordingParams
}

type DownloadRecordingResponseObject interface {
	VisitDownloadRecordingResponse(w http.ResponseWriter) error
}

type DownloadRecording200ResponseHeaders struct {
	XRecordingFinishedAt string
	XRecordingStartedAt  string
}

type DownloadRecording200Videomp4Response struct {
	Body          io.Reader
	Headers       DownloadRecording200ResponseHeaders
	ContentLength int64
}

func (response DownloadRecording200Videomp4Response) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "video/mp4")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Recording-Finished-At", fmt.Sprint(response.Headers.XRecordingFinishedAt))
	w.Header().Set("X-Recording-Started-At", fmt.Sprint(response.Headers.XRecordingStartedAt))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadRecording202ResponseHeaders struct {
	RetryAfter int
}

type DownloadRecording202Response struct {
	Headers DownloadRecording202ResponseHeaders
}

func (response DownloadRecording202Response) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(202)
	return nil
}

type DownloadRecording400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DownloadRecording400JSONResponse) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DownloadRecording404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DownloadRecording404JSONResponse) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DownloadRecording500JSONResponse struct{ InternalErrorJSONResponse }

func (response DownloadRecording500JSONResponse) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRecordersRequestObject struct {
}

type ListRecordersResponseObject interface {
	VisitListRecordersResponse(w http.ResponseWriter) error
}

type ListRecorders200JSONResponse []RecorderInfo

func (response ListRecorders200JSONResponse) VisitListRecordersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRecorders500JSONResponse struct{ InternalErrorJSONResponse }

func (response ListRecorders500JSONResponse) VisitListRecordersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StartRecordingRequestObject struct {
	Body *StartRecordingJSONRequestBody
}

type StartRecordingResponseObject interface {
	VisitStartRecordingResponse(w http.ResponseWriter) error
}

type StartRecording201Response struct {
}

func (response StartRecording201Response) VisitStartRecordingResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type StartRecording400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StartRecording400JSONResponse) VisitStartRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StartRecording409JSONResponse struct{ ConflictErrorJSONResponse }

func (response StartRecording409JSONResponse) VisitStartRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type StartRecording500JSONResponse struct{ InternalErrorJSONResponse }

func (response StartRecording500JSONResponse) VisitStartRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StopRecordingRequestObject struct {
	Body *StopRecordingJSONRequestBody
}

type StopRecordingResponseObject interface {
	VisitStopRecordingResponse(w http.ResponseWriter) error
}

type StopRecording200Response struct {
}

func (response StopRecording200Response) VisitStopRecordingResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type StopRecording400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StopRecording400JSONResponse) VisitStopRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StopRecording500JSONResponse struct{ InternalErrorJSONResponse }

func (response StopRecording500JSONResponse) VisitStopRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Simulate a mouse click action on the host computer
	// (POST /computer/click_mouse)
	ClickMouse(ctx context.Context, request ClickMouseRequestObject) (ClickMouseResponseObject, error)
	// Move the mouse cursor to the specified coordinates on the host computer
	// (POST /computer/move_mouse)
	MoveMouse(ctx context.Context, request MoveMouseRequestObject) (MoveMouseResponseObject, error)
	// Create a new directory
	// (POST /fs/create_directory)
	CreateDirectory(ctx context.Context, request CreateDirectoryRequestObject) (CreateDirectoryResponseObject, error)
	// Delete a directory
	// (POST /fs/delete_directory)
	DeleteDirectory(ctx context.Context, request DeleteDirectoryRequestObject) (DeleteDirectoryResponseObject, error)
	// Delete a file
	// (POST /fs/delete_file)
	DeleteFile(ctx context.Context, request DeleteFileRequestObject) (DeleteFileResponseObject, error)
	// Get information about a file or directory
	// (GET /fs/file_info)
	FileInfo(ctx context.Context, request FileInfoRequestObject) (FileInfoResponseObject, error)
	// List files in a directory
	// (GET /fs/list_files)
	ListFiles(ctx context.Context, request ListFilesRequestObject) (ListFilesResponseObject, error)
	// Move or rename a file or directory
	// (POST /fs/move)
	MovePath(ctx context.Context, request MovePathRequestObject) (MovePathResponseObject, error)
	// Read file contents
	// (GET /fs/read_file)
	ReadFile(ctx context.Context, request ReadFileRequestObject) (ReadFileResponseObject, error)
	// Set file or directory permissions/ownership
	// (POST /fs/set_file_permissions)
	SetFilePermissions(ctx context.Context, request SetFilePermissionsRequestObject) (SetFilePermissionsResponseObject, error)
	// Watch a directory for changes
	// (POST /fs/watch)
	StartFsWatch(ctx context.Context, request StartFsWatchRequestObject) (StartFsWatchResponseObject, error)
	// Stop watching a directory
	// (DELETE /fs/watch/{watch_id})
	StopFsWatch(ctx context.Context, request StopFsWatchRequestObject) (StopFsWatchResponseObject, error)
	// Stream filesystem events for a watch
	// (GET /fs/watch/{watch_id}/events)
	StreamFsEvents(ctx context.Context, request StreamFsEventsRequestObject) (StreamFsEventsResponseObject, error)
	// Write or create a file
	// (POST /fs/write_file)
	WriteFile(ctx context.Context, request WriteFileRequestObject) (WriteFileResponseObject, error)
	// Delete a previously recorded video file
	// (POST /recording/delete)
	DeleteRecording(ctx context.Context, request DeleteRecordingRequestObject) (DeleteRecordingResponseObject, error)
	// Download the most recently recorded video file
	// (GET /recording/download)
	DownloadRecording(ctx context.Context, request DownloadRecordingRequestObject) (DownloadRecordingResponseObject, error)
	// List all recorders
	// (GET /recording/list)
	ListRecorders(ctx context.Context, request ListRecordersRequestObject) (ListRecordersResponseObject, error)
	// Start a screen recording. Only one recording per ID can be registered at a time.
	// (POST /recording/start)
	StartRecording(ctx context.Context, request StartRecordingRequestObject) (StartRecordingResponseObject, error)
	// Stop the recording
	// (POST /recording/stop)
	StopRecording(ctx context.Context, request StopRecordingRequestObject) (StopRecordingResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ClickMouse operation middleware
func (sh *strictHandler) ClickMouse(w http.ResponseWriter, r *http.Request) {
	var request ClickMouseRequestObject

	var body ClickMouseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClickMouse(ctx, request.(ClickMouseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClickMouse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClickMouseResponseObject); ok {
		if err := validResponse.VisitClickMouseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MoveMouse operation middleware
func (sh *strictHandler) MoveMouse(w http.ResponseWriter, r *http.Request) {
	var request MoveMouseRequestObject

	var body MoveMouseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MoveMouse(ctx, request.(MoveMouseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MoveMouse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MoveMouseResponseObject); ok {
		if err := validResponse.VisitMoveMouseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDirectory operation middleware
func (sh *strictHandler) CreateDirectory(w http.ResponseWriter, r *http.Request) {
	var request CreateDirectoryRequestObject

	var body CreateDirectoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDirectory(ctx, request.(CreateDirectoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDirectory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDirectoryResponseObject); ok {
		if err := validResponse.VisitCreateDirectoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDirectory operation middleware
func (sh *strictHandler) DeleteDirectory(w http.ResponseWriter, r *http.Request) {
	var request DeleteDirectoryRequestObject

	var body DeleteDirectoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDirectory(ctx, request.(DeleteDirectoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDirectory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDirectoryResponseObject); ok {
		if err := validResponse.VisitDeleteDirectoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFile operation middleware
func (sh *strictHandler) DeleteFile(w http.ResponseWriter, r *http.Request) {
	var request DeleteFileRequestObject

	var body DeleteFileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFile(ctx, request.(DeleteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFileResponseObject); ok {
		if err := validResponse.VisitDeleteFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FileInfo operation middleware
func (sh *strictHandler) FileInfo(w http.ResponseWriter, r *http.Request, params FileInfoParams) {
	var request FileInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FileInfo(ctx, request.(FileInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FileInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FileInfoResponseObject); ok {
		if err := validResponse.VisitFileInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFiles operation middleware
func (sh *strictHandler) ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams) {
	var request ListFilesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFiles(ctx, request.(ListFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFiles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFilesResponseObject); ok {
		if err := validResponse.VisitListFilesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MovePath operation middleware
func (sh *strictHandler) MovePath(w http.ResponseWriter, r *http.Request) {
	var request MovePathRequestObject

	var body MovePathJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MovePath(ctx, request.(MovePathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MovePath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MovePathResponseObject); ok {
		if err := validResponse.VisitMovePathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadFile operation middleware
func (sh *strictHandler) ReadFile(w http.ResponseWriter, r *http.Request, params ReadFileParams) {
	var request ReadFileRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadFile(ctx, request.(ReadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadFileResponseObject); ok {
		if err := validResponse.VisitReadFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetFilePermissions operation middleware
func (sh *strictHandler) SetFilePermissions(w http.ResponseWriter, r *http.Request) {
	var request SetFilePermissionsRequestObject

	var body SetFilePermissionsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetFilePermissions(ctx, request.(SetFilePermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetFilePermissions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetFilePermissionsResponseObject); ok {
		if err := validResponse.VisitSetFilePermissionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StartFsWatch operation middleware
func (sh *strictHandler) StartFsWatch(w http.ResponseWriter, r *http.Request) {
	var request StartFsWatchRequestObject

	var body StartFsWatchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StartFsWatch(ctx, request.(StartFsWatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartFsWatch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StartFsWatchResponseObject); ok {
		if err := validResponse.VisitStartFsWatchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StopFsWatch operation middleware
func (sh *strictHandler) StopFsWatch(w http.ResponseWriter, r *http.Request, watchId string) {
	var request StopFsWatchRequestObject

	request.WatchId = watchId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StopFsWatch(ctx, request.(StopFsWatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopFsWatch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StopFsWatchResponseObject); ok {
		if err := validResponse.VisitStopFsWatchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StreamFsEvents operation middleware
func (sh *strictHandler) StreamFsEvents(w http.ResponseWriter, r *http.Request, watchId string) {
	var request StreamFsEventsRequestObject

	request.WatchId = watchId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StreamFsEvents(ctx, request.(StreamFsEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StreamFsEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StreamFsEventsResponseObject); ok {
		if err := validResponse.VisitStreamFsEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// WriteFile operation middleware
func (sh *strictHandler) WriteFile(w http.ResponseWriter, r *http.Request, params WriteFileParams) {
	var request WriteFileRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WriteFile(ctx, request.(WriteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WriteFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WriteFileResponseObject); ok {
		if err := validResponse.VisitWriteFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRecording operation middleware
func (sh *strictHandler) DeleteRecording(w http.ResponseWriter, r *http.Request) {
	var request DeleteRecordingRequestObject

	var body DeleteRecordingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRecording(ctx, request.(DeleteRecordingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRecording")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRecordingResponseObject); ok {
		if err := validResponse.VisitDeleteRecordingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DownloadRecording operation middleware
func (sh *strictHandler) DownloadRecording(w http.ResponseWriter, r *http.Request, params DownloadRecordingParams) {
	var request DownloadRecordingRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadRecording(ctx, request.(DownloadRecordingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadRecording")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DownloadRecordingResponseObject); ok {
		if err := validResponse.VisitDownloadRecordingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRecorders operation middleware
func (sh *strictHandler) ListRecorders(w http.ResponseWriter, r *http.Request) {
	var request ListRecordersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRecorders(ctx, request.(ListRecordersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRecorders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRecordersResponseObject); ok {
		if err := validResponse.VisitListRecordersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StartRecording operation middleware
func (sh *strictHandler) StartRecording(w http.ResponseWriter, r *http.Request) {
	var request StartRecordingRequestObject

	var body StartRecordingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StartRecording(ctx, request.(StartRecordingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartRecording")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StartRecordingResponseObject); ok {
		if err := validResponse.VisitStartRecordingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StopRecording operation middleware
func (sh *strictHandler) StopRecording(w http.ResponseWriter, r *http.Request) {
	var request StopRecordingRequestObject

	var body StopRecordingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StopRecording(ctx, request.(StopRecordingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopRecording")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StopRecordingResponseObject); ok {
		if err := validResponse.VisitStopRecordingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xbe3MUNxL/Kipd/gh3sw/AJBX/Z7BJuS4mlJcUuQvclnbUs6swIw2SxstC+btftTTP",
	"He3DaxviVFEFOzOS+t2/bjVfaKyyXEmQ1tDjL1SDyZU04H48Z/wSPhZg7JnWSuOjWEkL0uI/WZ6nImZW",
	"KDn60yiJz0y8gIzhv77TkNBj+o9Rs//IvzUjv9v19XVEOZhYixw3ocd4IClPpNcRfaFkkor4a51eHYdH",
	"n0sLWrL0Kx1dHUcmoK9Ak/LDiL5S9qUqJP9KdLxSlrjzKL4rP8fdXqQi/nChCgOVfpAAzgUuZOlrrXLQ",
	"VqDdJCw1ENG89egLnRXWegq7B7otiX9LrCICBcFiS5bCLmhEQRYZPf6DppBYGlEt5gv8OxOcp0AjOmPx",
	"BxrRROkl05y+j6hd5UCPqbFayDmKMEbSp/7x+vFvVjkQlRD3DWGxe9ycytUSfxY5LbcJHrBQKZ9+gJUJ",
	"scdFIkATfI384beEF7iU2AX4g2lEhYXMre/tXj5gWrMV/pZFNnWryuMSVqSWHj/uqbLIZqCROSsycIdr",
	"yIHZzrnl7ij2OTiL+9Tn4ncSK6W5kMw6adUbkFwZUcqsv9Oqv9N/DtnpOqIaPhZCA0elfKK4daMINfsT",
	"vNO+0MAsnAoNsVV6dZilZooHDOXX3C8nvNqd4IfkexVblhKvrojAcD4kPz579mhITr1mnOB/fPZsSCOa",
	"M4tuTo/p//4YD358/+VpdHT9HQ2YVM7sok/EycyotLDQIgI/xBNix/raIaPhP/ubr0nTnRQS5imkYOE1",
	"s4vD5LiDhYpw7o65e8IvIXaGNj+MesH7tJ9zkNa7c2m6ujqkxQk5SfMFk0UGWsREabJY5QuQ6/png88n",
	"g/+OBz8N3v/ruyCzPcbqHLBmsGAMm0MgeKxJrPowJLSXIoVzmaj+9sJMudB9abxdgF2AdnJwyhSGsMYy",
	"hw1PM6VSYBKPyRSfYjjqb/cLMxZdSiRlSnNha+hje8YsPaacWRi41QGPCbstsuUddSasId+jf0bkHeV6",
	"+UkP8M87ijp6Rwd6OdAD/POOPhqGTpAsRPdzZoDgq8omEjxS6aAk9nZwfB1cZ8RnmM5WFgLJZiI+AxGS",
	"uNdDMiZJiwwBZrg7tjoeS+o6h0WVHbR0WAp9kzlNVsZCdnZVopW+Yoz7gMQLJudAAD90XnJj82NJArEF",
	"vr8dHqrL+qhDlXozKwmDFidSgu+GLazy4vLs5M0Zjejby3P39+nZL2fuH5dnr04uzgLQZU357m20ObD+",
	"Iox1egvwiOgEeetLTEjvwOjSIG1liDXg2YZT66gUwEEX6gpuAUhvA9oydQU3wmy7MJVVbk8PhwptlCZW",
	"HYSp9t1pb0yFYj4cBHAwdroLzICxSDwaSBX3dmGBiBod79rYqELHsPeeayKpD4haXIQk5JEG6HD6TIQU",
	"ZgF8ygJR8A0ic8uynCwXIFtwolq1Kf3JIk3ZLAV6bHUBAfF4/NJ/bGpc1HrfCozGMm1vSm256EBi1+Qu",
	"OO3SGZL5BFwkeg06E8YIJc1h9jnXqsj7nL6CJXGvymygyc/np8PDYUegSPjh6OjRzWoCtZSgw7S6V6Qw",
	"oCt6f9tA7z4parlQBkjeyJYw7SLLDMpkzQ/F61sgwwSN6KV5y2x8pxVHXQ4iB0vcPSgYDRguxRV0qury",
	"nA3Qo9yP1GvTINzYt3BxErhl3ZJoloFmNmCUl010qT5CtJjkaKBXoLXgYIjxDahSAo9QY+yTyBBjPBlH",
	"NBPS/3gcyk6hqqmunEVTPiEw7dZPBpyp3VH15Ig+LbRLKudyArGSPJTpPWstOni5CCVj/LId0tkqkIx9",
	"clBYfIZzefF8MwUON5kSwF8831Mjj8fjcUcp42CmD1iaym9raErHgPvs9pfzLAMumIV0RYxVuevtqcKS",
	"uWYxJEVKzKKwXC3lkLxZCEMytiIaTJFalAYjsdK6yBHgXwkOygkrjOtvUrZ7D0aC7q1mx0eihAVWWEyB",
	"9N+gJaTkPGNzMOTk9TmN6BVo44kdDx8Pxy7a5yBZLugxfTocD5+WuNyJ3iHlwoIe+dZmhijYBUDl1Yh6",
	"8qbP6XGrdUt9IAJjnyu+urNucr83fN2NeZj23YPW3cKT8XhTN9i3YTEBIZwAjuI48p+HyKi3Ha3fV1xH",
	"9Nk+67rNftf5LrKM6ZUrqrMixVDJiJNzp1VMlHQGtVDGkkorboNGRwjHd6mormXuSUO9Wul2CioLC+Ts",
	"2yrnoip1sjZdVrlnJocY3Z636iOzRWOJGfku6rQuXrc4VbfVfF+eFW5o76W9x9ugkGeUE1PEMRiTFGm6",
	"+qaa9JwSRiQsm+ZBrRjfW91HMb77e9+K6TfHD/WoRieex1s51NH4aPe67pXiXSjPS6PddVtXHGbsXTpD",
	"oPSXV5er7P4GmnIKqZSEP6YVTplDQEN1Iw5hCFYPFrShx38c3usU+PnHApyL+nZsVSJ21RK1dLyz5Hwf",
	"1uGdGFHTjOzfmzuzaHU6H6Bp/Ay206tlM4TorK+92mxSYazzbLPRbpqW8b6G073afJiW0nAdMJUm4KP8",
	"ynL1gdkKMugMw/gCrW8brkW+Fe++blR4H3D3LoK9g5cNRHqAinIcKE00uMbgNm/WwHidp4POfAmMl0l6",
	"P192h1UX/bj/X8WdVWzBDozVwLKuWdUN7JmQzJG4flI49iN3d4amv5GxoH69zkqxmdo4DPhIP211hTe7",
	"d787f0+Ovvka4FCXb21FipyzhwnzJmADN7Et3Y3cjYFZiLxWsWtlb9Fpqz1/X9oM3ADsX+ruTUK3j+nY",
	"nob6hr9J8bGAUNu6EemyFMdencC1WwR3dVBenT300OGZaQEBJyt/WWS6Jjb6Uon82sscK5KQvam8Mbe1",
	"fONySJk0yhRS63FbGtmdNY4CkyalolSeP3xFTVz/HTkSch5EbutKGrnBnM0Qf+Ky6Etz5j/7irpaz/AW",
	"PllPbTC176rt2vNKAX+dTM6I37aacynnl6BifAGMO66/0N8Hk8nZ4IWnbfAmOMZzAVwwN8aDG+L2nFlW",
	"bke+Xw9ij2hbOtXUTy/UBaZ8rh+imTpB96Tswgorw25tsVrsbDG9xW/2Aa+nrWkU1gOy9wdgo433pkk9",
	"TLBxjqAzbPzD0dEmMt3l+waytk4feO/bJ+XfElof0NV2+BttwIJ88HkUzRRRW1z1w5tGXX1JPWpy5rZ+",
	"ajNBc59N1d418nWpx11IuxlH+Bu0U3MNV0IVJl1Vl8vtu+qe/tRSporxjTn1tPygrcKtUasOFvXVdgNb",
	"h+TtAiRRGXoIj/zdmJ8pKAwYj2h9/KiXbwogLmeHw8euy/Hd+dsJbJTlR7cuyVujLj7kd1Jz/Xbwshyz",
	"G5xsHXdTiZ94646sVDN6Q/JzwTSTFoCXU1KXL188ffr0pyHdBmiiDikTXwgcRElZRBxKCJLyZPxkm4sK",
	"Q4wVaUqEJLlWcw3GRCRPgRkgVq8ImzMhScos6K64L8Hq1eAksaHZtUkxn4PB+mfJhHUT/+3BmxkkSiOj",
	"Vq+8EzRMbJu7eYiIp3L58jrbOF8EafeLKKnweWBjE74aUvWdmFv0vfea2+6MxPbmofv+6vrJKqnDj7m7",
	"LjVL0/a2XbE5x9nR87jvNBqe+gtm0cfbXLQawr2V6f+0e133P+XeDdhn2hJGTKyhPVc8JL/KdEWUbMe6",
	"HDQ5PyUxkxjfNMyFsaCBE4Zb+P8z1NOyn1LbpOTWLNy96Tgwb3dzoFT2IL7tPJRVeTf9OEb+HwAA//9h",
	"LE/fSD4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
