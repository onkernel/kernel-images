// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ClickMouseRequestButton.
const (
	Back    ClickMouseRequestButton = "back"
	Forward ClickMouseRequestButton = "forward"
	Left    ClickMouseRequestButton = "left"
	Middle  ClickMouseRequestButton = "middle"
	Right   ClickMouseRequestButton = "right"
)

// Defines values for ClickMouseRequestClickType.
const (
	Click ClickMouseRequestClickType = "click"
	Down  ClickMouseRequestClickType = "down"
	Up    ClickMouseRequestClickType = "up"
)

// Defines values for FileSystemEventType.
const (
	CREATE FileSystemEventType = "CREATE"
	DELETE FileSystemEventType = "DELETE"
	RENAME FileSystemEventType = "RENAME"
	WRITE  FileSystemEventType = "WRITE"
)

// Defines values for PatchDisplayRequestRefreshRate.
const (
	N10 PatchDisplayRequestRefreshRate = 10
	N25 PatchDisplayRequestRefreshRate = 25
	N30 PatchDisplayRequestRefreshRate = 30
	N60 PatchDisplayRequestRefreshRate = 60
)

// Defines values for ProcessKillRequestSignal.
const (
	HUP  ProcessKillRequestSignal = "HUP"
	INT  ProcessKillRequestSignal = "INT"
	KILL ProcessKillRequestSignal = "KILL"
	TERM ProcessKillRequestSignal = "TERM"
)

// Defines values for ProcessStatusState.
const (
	Exited  ProcessStatusState = "exited"
	Running ProcessStatusState = "running"
)

// Defines values for ProcessStreamEventEvent.
const (
	Exit ProcessStreamEventEvent = "exit"
)

// Defines values for ProcessStreamEventStream.
const (
	Stderr ProcessStreamEventStream = "stderr"
	Stdout ProcessStreamEventStream = "stdout"
)

// Defines values for LogsStreamParamsSource.
const (
	Path       LogsStreamParamsSource = "path"
	Supervisor LogsStreamParamsSource = "supervisor"
)

// ClickMouseRequest defines model for ClickMouseRequest.
type ClickMouseRequest struct {
	// Button Mouse button to interact with
	Button *ClickMouseRequestButton `json:"button,omitempty"`

	// ClickType Type of click action
	ClickType *ClickMouseRequestClickType `json:"click_type,omitempty"`

	// HoldKeys Modifier keys to hold during the click
	HoldKeys *[]string `json:"hold_keys,omitempty"`

	// NumClicks Number of times to repeat the click
	NumClicks *int `json:"num_clicks,omitempty"`

	// X X coordinate of the click position
	X int `json:"x"`

	// Y Y coordinate of the click position
	Y int `json:"y"`
}

// ClickMouseRequestButton Mouse button to interact with
type ClickMouseRequestButton string

// ClickMouseRequestClickType Type of click action
type ClickMouseRequestClickType string

// CreateDirectoryRequest defines model for CreateDirectoryRequest.
type CreateDirectoryRequest struct {
	// Mode Optional directory mode (octal string, e.g. 755). Defaults to 755.
	Mode *string `json:"mode,omitempty"`

	// Path Absolute directory path to create.
	Path string `json:"path"`
}

// DeletePathRequest defines model for DeletePathRequest.
type DeletePathRequest struct {
	// Path Absolute path to delete.
	Path string `json:"path"`
}

// DeleteRecordingRequest defines model for DeleteRecordingRequest.
type DeleteRecordingRequest struct {
	// Id Identifier of the recording to delete. Alphanumeric or hyphen.
	Id *string `json:"id,omitempty"`
}

// DisplayConfig defines model for DisplayConfig.
type DisplayConfig struct {
	// Height Current display height in pixels
	Height *int `json:"height,omitempty"`

	// RefreshRate Current display refresh rate in Hz (may be null if not detectable)
	RefreshRate *int `json:"refresh_rate,omitempty"`

	// Width Current display width in pixels
	Width *int `json:"width,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// FileInfo defines model for FileInfo.
type FileInfo struct {
	// IsDir Whether the path is a directory.
	IsDir bool `json:"is_dir"`

	// ModTime Last modification time.
	ModTime time.Time `json:"mod_time"`

	// Mode File mode bits (e.g., "drwxr-xr-x" or "-rw-r--r--").
	Mode string `json:"mode"`

	// Name Base name of the file or directory.
	Name string `json:"name"`

	// Path Absolute path.
	Path string `json:"path"`

	// SizeBytes Size in bytes. 0 for directories.
	SizeBytes int `json:"size_bytes"`
}

// FileSystemEvent Filesystem change event.
type FileSystemEvent struct {
	// IsDir Whether the affected path is a directory.
	IsDir *bool `json:"is_dir,omitempty"`

	// Name Base name of the file or directory affected.
	Name *string `json:"name,omitempty"`

	// Path Absolute path of the file or directory.
	Path string `json:"path"`

	// Type Event type.
	Type FileSystemEventType `json:"type"`
}

// FileSystemEventType Event type.
type FileSystemEventType string

// ListFiles Array of file or directory information entries.
type ListFiles = []FileInfo

// LogEvent A log entry from the application.
type LogEvent struct {
	// Message Log message text.
	Message string `json:"message"`

	// Timestamp Time the log entry was produced.
	Timestamp time.Time `json:"timestamp"`
}

// MoveMouseRequest defines model for MoveMouseRequest.
type MoveMouseRequest struct {
	// HoldKeys Modifier keys to hold during the move
	HoldKeys *[]string `json:"hold_keys,omitempty"`

	// X X coordinate to move the cursor to
	X int `json:"x"`

	// Y Y coordinate to move the cursor to
	Y int `json:"y"`
}

// MovePathRequest defines model for MovePathRequest.
type MovePathRequest struct {
	// DestPath Absolute destination path.
	DestPath string `json:"dest_path"`

	// SrcPath Absolute source path.
	SrcPath string `json:"src_path"`
}

// OkResponse Generic OK response.
type OkResponse struct {
	// Ok Indicates success.
	Ok bool `json:"ok"`
}

// PatchDisplayRequest defines model for PatchDisplayRequest.
type PatchDisplayRequest struct {
	// Height Display height in pixels
	Height *int `json:"height,omitempty"`

	// RefreshRate Display refresh rate in Hz. If omitted, uses the highest available rate for the resolution.
	RefreshRate *PatchDisplayRequestRefreshRate `json:"refresh_rate,omitempty"`

	// RequireIdle If true, refuse to resize when live view or recording/replay is active.
	RequireIdle *bool `json:"require_idle,omitempty"`

	// RestartChromium If true, restart Chromium after resolution change to ensure it adapts to new size. Default is false for headful, true for headless.
	RestartChromium *bool `json:"restart_chromium,omitempty"`

	// Width Display width in pixels
	Width *int `json:"width,omitempty"`
}

// PatchDisplayRequestRefreshRate Display refresh rate in Hz. If omitted, uses the highest available rate for the resolution.
type PatchDisplayRequestRefreshRate int

// ProcessExecRequest Request to execute a command synchronously.
type ProcessExecRequest struct {
	// Args Command arguments.
	Args *[]string `json:"args,omitempty"`

	// AsRoot Run the process with root privileges.
	AsRoot *bool `json:"as_root,omitempty"`

	// AsUser Run the process as this user.
	AsUser *string `json:"as_user"`

	// Command Executable or shell command to run.
	Command string `json:"command"`

	// Cwd Working directory (absolute path) to run the command in.
	Cwd *string `json:"cwd"`

	// Env Environment variables to set for the process.
	Env *map[string]string `json:"env,omitempty"`

	// TimeoutSec Maximum execution time in seconds.
	TimeoutSec *int `json:"timeout_sec"`
}

// ProcessExecResult Result of a synchronous command execution.
type ProcessExecResult struct {
	// DurationMs Execution duration in milliseconds.
	DurationMs *int `json:"duration_ms,omitempty"`

	// ExitCode Process exit code.
	ExitCode *int `json:"exit_code,omitempty"`

	// StderrB64 Base64-encoded stderr buffer.
	StderrB64 *string `json:"stderr_b64,omitempty"`

	// StdoutB64 Base64-encoded stdout buffer.
	StdoutB64 *string `json:"stdout_b64,omitempty"`
}

// ProcessKillRequest Signal to send to the process.
type ProcessKillRequest struct {
	// Signal Signal to send.
	Signal ProcessKillRequestSignal `json:"signal"`
}

// ProcessKillRequestSignal Signal to send.
type ProcessKillRequestSignal string

// ProcessSpawnRequest Request to execute a command synchronously.
type ProcessSpawnRequest = ProcessExecRequest

// ProcessSpawnResult Information about a spawned process.
type ProcessSpawnResult struct {
	// Pid OS process ID.
	Pid *int `json:"pid,omitempty"`

	// ProcessId Server-assigned identifier for the process.
	ProcessId *openapi_types.UUID `json:"process_id,omitempty"`

	// StartedAt Timestamp when the process started.
	StartedAt *time.Time `json:"started_at,omitempty"`
}

// ProcessStatus Current status of a process.
type ProcessStatus struct {
	// CpuPct Estimated CPU usage percentage.
	CpuPct *float32 `json:"cpu_pct,omitempty"`

	// ExitCode Exit code if the process has exited.
	ExitCode *int `json:"exit_code"`

	// MemBytes Estimated resident memory usage in bytes.
	MemBytes *int `json:"mem_bytes,omitempty"`

	// State Process state.
	State *ProcessStatusState `json:"state,omitempty"`
}

// ProcessStatusState Process state.
type ProcessStatusState string

// ProcessStdinRequest Data to write to the process standard input.
type ProcessStdinRequest struct {
	// DataB64 Base64-encoded data to write.
	DataB64 string `json:"data_b64"`
}

// ProcessStdinResult Result of writing to stdin.
type ProcessStdinResult struct {
	// WrittenBytes Number of bytes written.
	WrittenBytes *int `json:"written_bytes,omitempty"`
}

// ProcessStreamEvent SSE payload representing process output or lifecycle events.
type ProcessStreamEvent struct {
	// DataB64 Base64-encoded data from the process stream.
	DataB64 *string `json:"data_b64,omitempty"`

	// Event Lifecycle event type.
	Event *ProcessStreamEventEvent `json:"event,omitempty"`

	// ExitCode Exit code when the event is "exit".
	ExitCode *int `json:"exit_code,omitempty"`

	// Stream Source stream of the data chunk.
	Stream *ProcessStreamEventStream `json:"stream,omitempty"`
}

// ProcessStreamEventEvent Lifecycle event type.
type ProcessStreamEventEvent string

// ProcessStreamEventStream Source stream of the data chunk.
type ProcessStreamEventStream string

// RecorderInfo defines model for RecorderInfo.
type RecorderInfo struct {
	// FinishedAt Timestamp when recording finished
	FinishedAt  *time.Time `json:"finished_at"`
	Id          string     `json:"id"`
	IsRecording bool       `json:"isRecording"`

	// StartedAt Timestamp when recording started
	StartedAt *time.Time `json:"started_at"`
}

// ScreenshotRegion defines model for ScreenshotRegion.
type ScreenshotRegion struct {
	// Height Height of the region in pixels
	Height int `json:"height"`

	// Width Width of the region in pixels
	Width int `json:"width"`

	// X X coordinate of the region's top-left corner
	X int `json:"x"`

	// Y Y coordinate of the region's top-left corner
	Y int `json:"y"`
}

// ScreenshotRequest defines model for ScreenshotRequest.
type ScreenshotRequest struct {
	Region *ScreenshotRegion `json:"region,omitempty"`
}

// SetFilePermissionsRequest defines model for SetFilePermissionsRequest.
type SetFilePermissionsRequest struct {
	// Group New group name or GID.
	Group *string `json:"group,omitempty"`

	// Mode File mode bits (octal string, e.g. 644).
	Mode string `json:"mode"`

	// Owner New owner username or UID.
	Owner *string `json:"owner,omitempty"`

	// Path Absolute path whose permissions are to be changed.
	Path string `json:"path"`
}

// StartFsWatchRequest defines model for StartFsWatchRequest.
type StartFsWatchRequest struct {
	// Path Directory to watch.
	Path string `json:"path"`

	// Recursive Whether to watch recursively.
	Recursive *bool `json:"recursive,omitempty"`
}

// StartRecordingRequest defines model for StartRecordingRequest.
type StartRecordingRequest struct {
	// Framerate Recording framerate in fps (overrides server default)
	Framerate *int `json:"framerate,omitempty"`

	// Id Optional identifier for the recording session. Alphanumeric or hyphen.
	Id *string `json:"id,omitempty"`

	// MaxDurationInSeconds Maximum recording duration in seconds (overrides server default)
	MaxDurationInSeconds *int `json:"maxDurationInSeconds,omitempty"`

	// MaxFileSizeInMB Maximum file size in MB (overrides server default)
	MaxFileSizeInMB *int `json:"maxFileSizeInMB,omitempty"`
}

// StopRecordingRequest defines model for StopRecordingRequest.
type StopRecordingRequest struct {
	// ForceStop Immediately stop without graceful shutdown. This may result in a corrupted video file.
	ForceStop *bool `json:"forceStop,omitempty"`

	// Id Identifier of the recorder to stop. Alphanumeric or hyphen.
	Id *string `json:"id,omitempty"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError = Error

// ConflictError defines model for ConflictError.
type ConflictError = Error

// InternalError defines model for InternalError.
type InternalError = Error

// NotFoundError defines model for NotFoundError.
type NotFoundError = Error

// UploadExtensionsAndRestartMultipartBody defines parameters for UploadExtensionsAndRestart.
type UploadExtensionsAndRestartMultipartBody struct {
	// Extensions List of extensions to upload and activate
	Extensions []struct {
		// Name Folder name to place the extension under /home/kernel/extensions/<name>
		Name string `json:"name"`

		// ZipFile Zip archive containing an unpacked Chromium extension (must include manifest.json)
		ZipFile openapi_types.File `json:"zip_file"`
	} `json:"extensions"`
}

// DownloadDirZipParams defines parameters for DownloadDirZip.
type DownloadDirZipParams struct {
	// Path Absolute directory path to archive and download.
	Path string `form:"path" json:"path"`
}

// FileInfoParams defines parameters for FileInfo.
type FileInfoParams struct {
	// Path Absolute path of the file or directory.
	Path string `form:"path" json:"path"`
}

// ListFilesParams defines parameters for ListFiles.
type ListFilesParams struct {
	// Path Absolute directory path.
	Path string `form:"path" json:"path"`
}

// ReadFileParams defines parameters for ReadFile.
type ReadFileParams struct {
	// Path Absolute file path to read.
	Path string `form:"path" json:"path"`
}

// UploadFilesMultipartBody defines parameters for UploadFiles.
type UploadFilesMultipartBody struct {
	Files []struct {
		// DestPath Absolute destination path to write the file.
		DestPath string             `json:"dest_path"`
		File     openapi_types.File `json:"file"`
	} `json:"files"`
}

// UploadZipMultipartBody defines parameters for UploadZip.
type UploadZipMultipartBody struct {
	// DestPath Absolute destination directory to extract the archive to.
	DestPath string             `json:"dest_path"`
	ZipFile  openapi_types.File `json:"zip_file"`
}

// WriteFileParams defines parameters for WriteFile.
type WriteFileParams struct {
	// Path Destination absolute file path.
	Path string `form:"path" json:"path"`

	// Mode Optional file mode (octal string, e.g. 644). Defaults to 644.
	Mode *string `form:"mode,omitempty" json:"mode,omitempty"`
}

// LogsStreamParams defines parameters for LogsStream.
type LogsStreamParams struct {
	Source LogsStreamParamsSource `form:"source" json:"source"`
	Follow *bool                  `form:"follow,omitempty" json:"follow,omitempty"`

	// Path only required if source is path
	Path *string `form:"path,omitempty" json:"path,omitempty"`

	// SupervisorProcess only required if source is supervisor
	SupervisorProcess *string `form:"supervisor_process,omitempty" json:"supervisor_process,omitempty"`
}

// LogsStreamParamsSource defines parameters for LogsStream.
type LogsStreamParamsSource string

// DownloadRecordingParams defines parameters for DownloadRecording.
type DownloadRecordingParams struct {
	// Id Optional recorder identifier. When omitted, the server uses the default recorder.
	Id *string `form:"id,omitempty" json:"id,omitempty"`
}

// UploadExtensionsAndRestartMultipartRequestBody defines body for UploadExtensionsAndRestart for multipart/form-data ContentType.
type UploadExtensionsAndRestartMultipartRequestBody UploadExtensionsAndRestartMultipartBody

// ClickMouseJSONRequestBody defines body for ClickMouse for application/json ContentType.
type ClickMouseJSONRequestBody = ClickMouseRequest

// MoveMouseJSONRequestBody defines body for MoveMouse for application/json ContentType.
type MoveMouseJSONRequestBody = MoveMouseRequest

// TakeScreenshotJSONRequestBody defines body for TakeScreenshot for application/json ContentType.
type TakeScreenshotJSONRequestBody = ScreenshotRequest

// PatchDisplayJSONRequestBody defines body for PatchDisplay for application/json ContentType.
type PatchDisplayJSONRequestBody = PatchDisplayRequest

// CreateDirectoryJSONRequestBody defines body for CreateDirectory for application/json ContentType.
type CreateDirectoryJSONRequestBody = CreateDirectoryRequest

// DeleteDirectoryJSONRequestBody defines body for DeleteDirectory for application/json ContentType.
type DeleteDirectoryJSONRequestBody = DeletePathRequest

// DeleteFileJSONRequestBody defines body for DeleteFile for application/json ContentType.
type DeleteFileJSONRequestBody = DeletePathRequest

// MovePathJSONRequestBody defines body for MovePath for application/json ContentType.
type MovePathJSONRequestBody = MovePathRequest

// SetFilePermissionsJSONRequestBody defines body for SetFilePermissions for application/json ContentType.
type SetFilePermissionsJSONRequestBody = SetFilePermissionsRequest

// UploadFilesMultipartRequestBody defines body for UploadFiles for multipart/form-data ContentType.
type UploadFilesMultipartRequestBody UploadFilesMultipartBody

// UploadZipMultipartRequestBody defines body for UploadZip for multipart/form-data ContentType.
type UploadZipMultipartRequestBody UploadZipMultipartBody

// StartFsWatchJSONRequestBody defines body for StartFsWatch for application/json ContentType.
type StartFsWatchJSONRequestBody = StartFsWatchRequest

// ProcessExecJSONRequestBody defines body for ProcessExec for application/json ContentType.
type ProcessExecJSONRequestBody = ProcessExecRequest

// ProcessSpawnJSONRequestBody defines body for ProcessSpawn for application/json ContentType.
type ProcessSpawnJSONRequestBody = ProcessSpawnRequest

// ProcessKillJSONRequestBody defines body for ProcessKill for application/json ContentType.
type ProcessKillJSONRequestBody = ProcessKillRequest

// ProcessStdinJSONRequestBody defines body for ProcessStdin for application/json ContentType.
type ProcessStdinJSONRequestBody = ProcessStdinRequest

// DeleteRecordingJSONRequestBody defines body for DeleteRecording for application/json ContentType.
type DeleteRecordingJSONRequestBody = DeleteRecordingRequest

// StartRecordingJSONRequestBody defines body for StartRecording for application/json ContentType.
type StartRecordingJSONRequestBody = StartRecordingRequest

// StopRecordingJSONRequestBody defines body for StopRecording for application/json ContentType.
type StopRecordingJSONRequestBody = StopRecordingRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// UploadExtensionsAndRestartWithBody request with any body
	UploadExtensionsAndRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClickMouseWithBody request with any body
	ClickMouseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClickMouse(ctx context.Context, body ClickMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveMouseWithBody request with any body
	MoveMouseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveMouse(ctx context.Context, body MoveMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TakeScreenshotWithBody request with any body
	TakeScreenshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TakeScreenshot(ctx context.Context, body TakeScreenshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDisplayWithBody request with any body
	PatchDisplayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDisplay(ctx context.Context, body PatchDisplayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDirectoryWithBody request with any body
	CreateDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDirectory(ctx context.Context, body CreateDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDirectoryWithBody request with any body
	DeleteDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteDirectory(ctx context.Context, body DeleteDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFileWithBody request with any body
	DeleteFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteFile(ctx context.Context, body DeleteFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadDirZip request
	DownloadDirZip(ctx context.Context, params *DownloadDirZipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FileInfo request
	FileInfo(ctx context.Context, params *FileInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFiles request
	ListFiles(ctx context.Context, params *ListFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MovePathWithBody request with any body
	MovePathWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MovePath(ctx context.Context, body MovePathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadFile request
	ReadFile(ctx context.Context, params *ReadFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetFilePermissionsWithBody request with any body
	SetFilePermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetFilePermissions(ctx context.Context, body SetFilePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadFilesWithBody request with any body
	UploadFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadZipWithBody request with any body
	UploadZipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartFsWatchWithBody request with any body
	StartFsWatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartFsWatch(ctx context.Context, body StartFsWatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopFsWatch request
	StopFsWatch(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StreamFsEvents request
	StreamFsEvents(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WriteFileWithBody request with any body
	WriteFileWithBody(ctx context.Context, params *WriteFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogsStream request
	LogsStream(ctx context.Context, params *LogsStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessExecWithBody request with any body
	ProcessExecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProcessExec(ctx context.Context, body ProcessExecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessSpawnWithBody request with any body
	ProcessSpawnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProcessSpawn(ctx context.Context, body ProcessSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessKillWithBody request with any body
	ProcessKillWithBody(ctx context.Context, processId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProcessKill(ctx context.Context, processId openapi_types.UUID, body ProcessKillJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessStatus request
	ProcessStatus(ctx context.Context, processId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessStdinWithBody request with any body
	ProcessStdinWithBody(ctx context.Context, processId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProcessStdin(ctx context.Context, processId openapi_types.UUID, body ProcessStdinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessStdoutStream request
	ProcessStdoutStream(ctx context.Context, processId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecordingWithBody request with any body
	DeleteRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRecording(ctx context.Context, body DeleteRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadRecording request
	DownloadRecording(ctx context.Context, params *DownloadRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRecorders request
	ListRecorders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartRecordingWithBody request with any body
	StartRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartRecording(ctx context.Context, body StartRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopRecordingWithBody request with any body
	StopRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StopRecording(ctx context.Context, body StopRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) UploadExtensionsAndRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadExtensionsAndRestartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClickMouseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClickMouseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClickMouse(ctx context.Context, body ClickMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClickMouseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveMouseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveMouseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveMouse(ctx context.Context, body MoveMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveMouseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TakeScreenshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTakeScreenshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TakeScreenshot(ctx context.Context, body TakeScreenshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTakeScreenshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDisplayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDisplayRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDisplay(ctx context.Context, body PatchDisplayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDisplayRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDirectoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDirectory(ctx context.Context, body CreateDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDirectoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDirectoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDirectory(ctx context.Context, body DeleteDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDirectoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFile(ctx context.Context, body DeleteFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadDirZip(ctx context.Context, params *DownloadDirZipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadDirZipRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FileInfo(ctx context.Context, params *FileInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFileInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFiles(ctx context.Context, params *ListFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovePathWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovePathRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovePath(ctx context.Context, body MovePathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovePathRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadFile(ctx context.Context, params *ReadFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetFilePermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetFilePermissionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetFilePermissions(ctx context.Context, body SetFilePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetFilePermissionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadFilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadZipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadZipRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartFsWatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartFsWatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartFsWatch(ctx context.Context, body StartFsWatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartFsWatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopFsWatch(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopFsWatchRequest(c.Server, watchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StreamFsEvents(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStreamFsEventsRequest(c.Server, watchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WriteFileWithBody(ctx context.Context, params *WriteFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWriteFileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogsStream(ctx context.Context, params *LogsStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogsStreamRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessExecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessExecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessExec(ctx context.Context, body ProcessExecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessExecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessSpawnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessSpawnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessSpawn(ctx context.Context, body ProcessSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessSpawnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessKillWithBody(ctx context.Context, processId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessKillRequestWithBody(c.Server, processId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessKill(ctx context.Context, processId openapi_types.UUID, body ProcessKillJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessKillRequest(c.Server, processId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessStatus(ctx context.Context, processId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessStatusRequest(c.Server, processId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessStdinWithBody(ctx context.Context, processId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessStdinRequestWithBody(c.Server, processId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessStdin(ctx context.Context, processId openapi_types.UUID, body ProcessStdinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessStdinRequest(c.Server, processId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessStdoutStream(ctx context.Context, processId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessStdoutStreamRequest(c.Server, processId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecording(ctx context.Context, body DeleteRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadRecording(ctx context.Context, params *DownloadRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadRecordingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRecorders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRecordersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRecordingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRecording(ctx context.Context, body StartRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRecordingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopRecordingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopRecordingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopRecording(ctx context.Context, body StopRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopRecordingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewUploadExtensionsAndRestartRequestWithBody generates requests for UploadExtensionsAndRestart with any type of body
func NewUploadExtensionsAndRestartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chromium/upload-extensions-and-restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClickMouseRequest calls the generic ClickMouse builder with application/json body
func NewClickMouseRequest(server string, body ClickMouseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClickMouseRequestWithBody(server, "application/json", bodyReader)
}

// NewClickMouseRequestWithBody generates requests for ClickMouse with any type of body
func NewClickMouseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/computer/click_mouse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveMouseRequest calls the generic MoveMouse builder with application/json body
func NewMoveMouseRequest(server string, body MoveMouseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveMouseRequestWithBody(server, "application/json", bodyReader)
}

// NewMoveMouseRequestWithBody generates requests for MoveMouse with any type of body
func NewMoveMouseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/computer/move_mouse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTakeScreenshotRequest calls the generic TakeScreenshot builder with application/json body
func NewTakeScreenshotRequest(server string, body TakeScreenshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTakeScreenshotRequestWithBody(server, "application/json", bodyReader)
}

// NewTakeScreenshotRequestWithBody generates requests for TakeScreenshot with any type of body
func NewTakeScreenshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/computer/screenshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchDisplayRequest calls the generic PatchDisplay builder with application/json body
func NewPatchDisplayRequest(server string, body PatchDisplayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDisplayRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchDisplayRequestWithBody generates requests for PatchDisplay with any type of body
func NewPatchDisplayRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/display")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDirectoryRequest calls the generic CreateDirectory builder with application/json body
func NewCreateDirectoryRequest(server string, body CreateDirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDirectoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDirectoryRequestWithBody generates requests for CreateDirectory with any type of body
func NewCreateDirectoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/create_directory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDirectoryRequest calls the generic DeleteDirectory builder with application/json body
func NewDeleteDirectoryRequest(server string, body DeleteDirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteDirectoryRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteDirectoryRequestWithBody generates requests for DeleteDirectory with any type of body
func NewDeleteDirectoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/delete_directory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFileRequest calls the generic DeleteFile builder with application/json body
func NewDeleteFileRequest(server string, body DeleteFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFileRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteFileRequestWithBody generates requests for DeleteFile with any type of body
func NewDeleteFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/delete_file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDownloadDirZipRequest generates requests for DownloadDirZip
func NewDownloadDirZipRequest(server string, params *DownloadDirZipParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/download_dir_zip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFileInfoRequest generates requests for FileInfo
func NewFileInfoRequest(server string, params *FileInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/file_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFilesRequest generates requests for ListFiles
func NewListFilesRequest(server string, params *ListFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/list_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMovePathRequest calls the generic MovePath builder with application/json body
func NewMovePathRequest(server string, body MovePathJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMovePathRequestWithBody(server, "application/json", bodyReader)
}

// NewMovePathRequestWithBody generates requests for MovePath with any type of body
func NewMovePathRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadFileRequest generates requests for ReadFile
func NewReadFileRequest(server string, params *ReadFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/read_file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetFilePermissionsRequest calls the generic SetFilePermissions builder with application/json body
func NewSetFilePermissionsRequest(server string, body SetFilePermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetFilePermissionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSetFilePermissionsRequestWithBody generates requests for SetFilePermissions with any type of body
func NewSetFilePermissionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/set_file_permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadFilesRequestWithBody generates requests for UploadFiles with any type of body
func NewUploadFilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadZipRequestWithBody generates requests for UploadZip with any type of body
func NewUploadZipRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/upload_zip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartFsWatchRequest calls the generic StartFsWatch builder with application/json body
func NewStartFsWatchRequest(server string, body StartFsWatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartFsWatchRequestWithBody(server, "application/json", bodyReader)
}

// NewStartFsWatchRequestWithBody generates requests for StartFsWatch with any type of body
func NewStartFsWatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/watch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStopFsWatchRequest generates requests for StopFsWatch
func NewStopFsWatchRequest(server string, watchId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "watch_id", runtime.ParamLocationPath, watchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/watch/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStreamFsEventsRequest generates requests for StreamFsEvents
func NewStreamFsEventsRequest(server string, watchId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "watch_id", runtime.ParamLocationPath, watchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/watch/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWriteFileRequestWithBody generates requests for WriteFile with any type of body
func NewWriteFileRequestWithBody(server string, params *WriteFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fs/write_file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogsStreamRequest generates requests for LogsStream
func NewLogsStreamRequest(server string, params *LogsStreamParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logs/stream")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, params.Source); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Follow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "follow", runtime.ParamLocationQuery, *params.Follow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupervisorProcess != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supervisor_process", runtime.ParamLocationQuery, *params.SupervisorProcess); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProcessExecRequest calls the generic ProcessExec builder with application/json body
func NewProcessExecRequest(server string, body ProcessExecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProcessExecRequestWithBody(server, "application/json", bodyReader)
}

// NewProcessExecRequestWithBody generates requests for ProcessExec with any type of body
func NewProcessExecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process/exec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProcessSpawnRequest calls the generic ProcessSpawn builder with application/json body
func NewProcessSpawnRequest(server string, body ProcessSpawnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProcessSpawnRequestWithBody(server, "application/json", bodyReader)
}

// NewProcessSpawnRequestWithBody generates requests for ProcessSpawn with any type of body
func NewProcessSpawnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process/spawn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProcessKillRequest calls the generic ProcessKill builder with application/json body
func NewProcessKillRequest(server string, processId openapi_types.UUID, body ProcessKillJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProcessKillRequestWithBody(server, processId, "application/json", bodyReader)
}

// NewProcessKillRequestWithBody generates requests for ProcessKill with any type of body
func NewProcessKillRequestWithBody(server string, processId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "process_id", runtime.ParamLocationPath, processId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process/%s/kill", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProcessStatusRequest generates requests for ProcessStatus
func NewProcessStatusRequest(server string, processId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "process_id", runtime.ParamLocationPath, processId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProcessStdinRequest calls the generic ProcessStdin builder with application/json body
func NewProcessStdinRequest(server string, processId openapi_types.UUID, body ProcessStdinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProcessStdinRequestWithBody(server, processId, "application/json", bodyReader)
}

// NewProcessStdinRequestWithBody generates requests for ProcessStdin with any type of body
func NewProcessStdinRequestWithBody(server string, processId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "process_id", runtime.ParamLocationPath, processId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process/%s/stdin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProcessStdoutStreamRequest generates requests for ProcessStdoutStream
func NewProcessStdoutStreamRequest(server string, processId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "process_id", runtime.ParamLocationPath, processId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process/%s/stdout/stream", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRecordingRequest calls the generic DeleteRecording builder with application/json body
func NewDeleteRecordingRequest(server string, body DeleteRecordingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRecordingRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRecordingRequestWithBody generates requests for DeleteRecording with any type of body
func NewDeleteRecordingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDownloadRecordingRequest generates requests for DownloadRecording
func NewDownloadRecordingRequest(server string, params *DownloadRecordingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRecordersRequest generates requests for ListRecorders
func NewListRecordersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartRecordingRequest calls the generic StartRecording builder with application/json body
func NewStartRecordingRequest(server string, body StartRecordingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartRecordingRequestWithBody(server, "application/json", bodyReader)
}

// NewStartRecordingRequestWithBody generates requests for StartRecording with any type of body
func NewStartRecordingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStopRecordingRequest calls the generic StopRecording builder with application/json body
func NewStopRecordingRequest(server string, body StopRecordingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStopRecordingRequestWithBody(server, "application/json", bodyReader)
}

// NewStopRecordingRequestWithBody generates requests for StopRecording with any type of body
func NewStopRecordingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recording/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// UploadExtensionsAndRestartWithBodyWithResponse request with any body
	UploadExtensionsAndRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadExtensionsAndRestartResponse, error)

	// ClickMouseWithBodyWithResponse request with any body
	ClickMouseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClickMouseResponse, error)

	ClickMouseWithResponse(ctx context.Context, body ClickMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*ClickMouseResponse, error)

	// MoveMouseWithBodyWithResponse request with any body
	MoveMouseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveMouseResponse, error)

	MoveMouseWithResponse(ctx context.Context, body MoveMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveMouseResponse, error)

	// TakeScreenshotWithBodyWithResponse request with any body
	TakeScreenshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TakeScreenshotResponse, error)

	TakeScreenshotWithResponse(ctx context.Context, body TakeScreenshotJSONRequestBody, reqEditors ...RequestEditorFn) (*TakeScreenshotResponse, error)

	// PatchDisplayWithBodyWithResponse request with any body
	PatchDisplayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDisplayResponse, error)

	PatchDisplayWithResponse(ctx context.Context, body PatchDisplayJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDisplayResponse, error)

	// CreateDirectoryWithBodyWithResponse request with any body
	CreateDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDirectoryResponse, error)

	CreateDirectoryWithResponse(ctx context.Context, body CreateDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDirectoryResponse, error)

	// DeleteDirectoryWithBodyWithResponse request with any body
	DeleteDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDirectoryResponse, error)

	DeleteDirectoryWithResponse(ctx context.Context, body DeleteDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDirectoryResponse, error)

	// DeleteFileWithBodyWithResponse request with any body
	DeleteFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error)

	DeleteFileWithResponse(ctx context.Context, body DeleteFileJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error)

	// DownloadDirZipWithResponse request
	DownloadDirZipWithResponse(ctx context.Context, params *DownloadDirZipParams, reqEditors ...RequestEditorFn) (*DownloadDirZipResponse, error)

	// FileInfoWithResponse request
	FileInfoWithResponse(ctx context.Context, params *FileInfoParams, reqEditors ...RequestEditorFn) (*FileInfoResponse, error)

	// ListFilesWithResponse request
	ListFilesWithResponse(ctx context.Context, params *ListFilesParams, reqEditors ...RequestEditorFn) (*ListFilesResponse, error)

	// MovePathWithBodyWithResponse request with any body
	MovePathWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MovePathResponse, error)

	MovePathWithResponse(ctx context.Context, body MovePathJSONRequestBody, reqEditors ...RequestEditorFn) (*MovePathResponse, error)

	// ReadFileWithResponse request
	ReadFileWithResponse(ctx context.Context, params *ReadFileParams, reqEditors ...RequestEditorFn) (*ReadFileResponse, error)

	// SetFilePermissionsWithBodyWithResponse request with any body
	SetFilePermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetFilePermissionsResponse, error)

	SetFilePermissionsWithResponse(ctx context.Context, body SetFilePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetFilePermissionsResponse, error)

	// UploadFilesWithBodyWithResponse request with any body
	UploadFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFilesResponse, error)

	// UploadZipWithBodyWithResponse request with any body
	UploadZipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadZipResponse, error)

	// StartFsWatchWithBodyWithResponse request with any body
	StartFsWatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartFsWatchResponse, error)

	StartFsWatchWithResponse(ctx context.Context, body StartFsWatchJSONRequestBody, reqEditors ...RequestEditorFn) (*StartFsWatchResponse, error)

	// StopFsWatchWithResponse request
	StopFsWatchWithResponse(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*StopFsWatchResponse, error)

	// StreamFsEventsWithResponse request
	StreamFsEventsWithResponse(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*StreamFsEventsResponse, error)

	// WriteFileWithBodyWithResponse request with any body
	WriteFileWithBodyWithResponse(ctx context.Context, params *WriteFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WriteFileResponse, error)

	// LogsStreamWithResponse request
	LogsStreamWithResponse(ctx context.Context, params *LogsStreamParams, reqEditors ...RequestEditorFn) (*LogsStreamResponse, error)

	// ProcessExecWithBodyWithResponse request with any body
	ProcessExecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessExecResponse, error)

	ProcessExecWithResponse(ctx context.Context, body ProcessExecJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessExecResponse, error)

	// ProcessSpawnWithBodyWithResponse request with any body
	ProcessSpawnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessSpawnResponse, error)

	ProcessSpawnWithResponse(ctx context.Context, body ProcessSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessSpawnResponse, error)

	// ProcessKillWithBodyWithResponse request with any body
	ProcessKillWithBodyWithResponse(ctx context.Context, processId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessKillResponse, error)

	ProcessKillWithResponse(ctx context.Context, processId openapi_types.UUID, body ProcessKillJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessKillResponse, error)

	// ProcessStatusWithResponse request
	ProcessStatusWithResponse(ctx context.Context, processId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ProcessStatusResponse, error)

	// ProcessStdinWithBodyWithResponse request with any body
	ProcessStdinWithBodyWithResponse(ctx context.Context, processId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessStdinResponse, error)

	ProcessStdinWithResponse(ctx context.Context, processId openapi_types.UUID, body ProcessStdinJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessStdinResponse, error)

	// ProcessStdoutStreamWithResponse request
	ProcessStdoutStreamWithResponse(ctx context.Context, processId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ProcessStdoutStreamResponse, error)

	// DeleteRecordingWithBodyWithResponse request with any body
	DeleteRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error)

	DeleteRecordingWithResponse(ctx context.Context, body DeleteRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error)

	// DownloadRecordingWithResponse request
	DownloadRecordingWithResponse(ctx context.Context, params *DownloadRecordingParams, reqEditors ...RequestEditorFn) (*DownloadRecordingResponse, error)

	// ListRecordersWithResponse request
	ListRecordersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRecordersResponse, error)

	// StartRecordingWithBodyWithResponse request with any body
	StartRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRecordingResponse, error)

	StartRecordingWithResponse(ctx context.Context, body StartRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRecordingResponse, error)

	// StopRecordingWithBodyWithResponse request with any body
	StopRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopRecordingResponse, error)

	StopRecordingWithResponse(ctx context.Context, body StopRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*StopRecordingResponse, error)
}

type UploadExtensionsAndRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r UploadExtensionsAndRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadExtensionsAndRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClickMouseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ClickMouseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClickMouseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveMouseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r MoveMouseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveMouseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TakeScreenshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r TakeScreenshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TakeScreenshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDisplayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DisplayConfig
	JSON400      *BadRequestError
	JSON409      *ConflictError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PatchDisplayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDisplayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r CreateDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DeleteDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DeleteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadDirZipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DownloadDirZipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadDirZipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FileInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileInfo
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r FileInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FileInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFiles
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ListFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MovePathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r MovePathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MovePathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ReadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetFilePermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r SetFilePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetFilePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r UploadFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadZipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r UploadZipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadZipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartFsWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// WatchId Unique identifier for the directory watch
		WatchId *string `json:"watch_id,omitempty"`
	}
	JSON400 *BadRequestError
	JSON404 *NotFoundError
	JSON500 *InternalError
}

// Status returns HTTPResponse.Status
func (r StartFsWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartFsWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopFsWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r StopFsWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopFsWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StreamFsEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r StreamFsEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StreamFsEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WriteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r WriteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WriteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogsStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogsStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogsStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessExecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessExecResult
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ProcessExecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessExecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessSpawnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessSpawnResult
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ProcessSpawnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessSpawnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessKillResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ProcessKillResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessKillResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessStatus
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ProcessStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessStdinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessStdinResult
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ProcessStdinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessStdinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessStdoutStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ProcessStdoutStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessStdoutStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DeleteRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON404      *NotFoundError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DownloadRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRecordersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RecorderInfo
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r ListRecordersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRecordersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON409      *ConflictError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r StartRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r StopRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// UploadExtensionsAndRestartWithBodyWithResponse request with arbitrary body returning *UploadExtensionsAndRestartResponse
func (c *ClientWithResponses) UploadExtensionsAndRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadExtensionsAndRestartResponse, error) {
	rsp, err := c.UploadExtensionsAndRestartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadExtensionsAndRestartResponse(rsp)
}

// ClickMouseWithBodyWithResponse request with arbitrary body returning *ClickMouseResponse
func (c *ClientWithResponses) ClickMouseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClickMouseResponse, error) {
	rsp, err := c.ClickMouseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClickMouseResponse(rsp)
}

func (c *ClientWithResponses) ClickMouseWithResponse(ctx context.Context, body ClickMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*ClickMouseResponse, error) {
	rsp, err := c.ClickMouse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClickMouseResponse(rsp)
}

// MoveMouseWithBodyWithResponse request with arbitrary body returning *MoveMouseResponse
func (c *ClientWithResponses) MoveMouseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveMouseResponse, error) {
	rsp, err := c.MoveMouseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveMouseResponse(rsp)
}

func (c *ClientWithResponses) MoveMouseWithResponse(ctx context.Context, body MoveMouseJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveMouseResponse, error) {
	rsp, err := c.MoveMouse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveMouseResponse(rsp)
}

// TakeScreenshotWithBodyWithResponse request with arbitrary body returning *TakeScreenshotResponse
func (c *ClientWithResponses) TakeScreenshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TakeScreenshotResponse, error) {
	rsp, err := c.TakeScreenshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTakeScreenshotResponse(rsp)
}

func (c *ClientWithResponses) TakeScreenshotWithResponse(ctx context.Context, body TakeScreenshotJSONRequestBody, reqEditors ...RequestEditorFn) (*TakeScreenshotResponse, error) {
	rsp, err := c.TakeScreenshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTakeScreenshotResponse(rsp)
}

// PatchDisplayWithBodyWithResponse request with arbitrary body returning *PatchDisplayResponse
func (c *ClientWithResponses) PatchDisplayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDisplayResponse, error) {
	rsp, err := c.PatchDisplayWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDisplayResponse(rsp)
}

func (c *ClientWithResponses) PatchDisplayWithResponse(ctx context.Context, body PatchDisplayJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDisplayResponse, error) {
	rsp, err := c.PatchDisplay(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDisplayResponse(rsp)
}

// CreateDirectoryWithBodyWithResponse request with arbitrary body returning *CreateDirectoryResponse
func (c *ClientWithResponses) CreateDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDirectoryResponse, error) {
	rsp, err := c.CreateDirectoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDirectoryResponse(rsp)
}

func (c *ClientWithResponses) CreateDirectoryWithResponse(ctx context.Context, body CreateDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDirectoryResponse, error) {
	rsp, err := c.CreateDirectory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDirectoryResponse(rsp)
}

// DeleteDirectoryWithBodyWithResponse request with arbitrary body returning *DeleteDirectoryResponse
func (c *ClientWithResponses) DeleteDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDirectoryResponse, error) {
	rsp, err := c.DeleteDirectoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDirectoryResponse(rsp)
}

func (c *ClientWithResponses) DeleteDirectoryWithResponse(ctx context.Context, body DeleteDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDirectoryResponse, error) {
	rsp, err := c.DeleteDirectory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDirectoryResponse(rsp)
}

// DeleteFileWithBodyWithResponse request with arbitrary body returning *DeleteFileResponse
func (c *ClientWithResponses) DeleteFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error) {
	rsp, err := c.DeleteFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileResponse(rsp)
}

func (c *ClientWithResponses) DeleteFileWithResponse(ctx context.Context, body DeleteFileJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error) {
	rsp, err := c.DeleteFile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileResponse(rsp)
}

// DownloadDirZipWithResponse request returning *DownloadDirZipResponse
func (c *ClientWithResponses) DownloadDirZipWithResponse(ctx context.Context, params *DownloadDirZipParams, reqEditors ...RequestEditorFn) (*DownloadDirZipResponse, error) {
	rsp, err := c.DownloadDirZip(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadDirZipResponse(rsp)
}

// FileInfoWithResponse request returning *FileInfoResponse
func (c *ClientWithResponses) FileInfoWithResponse(ctx context.Context, params *FileInfoParams, reqEditors ...RequestEditorFn) (*FileInfoResponse, error) {
	rsp, err := c.FileInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFileInfoResponse(rsp)
}

// ListFilesWithResponse request returning *ListFilesResponse
func (c *ClientWithResponses) ListFilesWithResponse(ctx context.Context, params *ListFilesParams, reqEditors ...RequestEditorFn) (*ListFilesResponse, error) {
	rsp, err := c.ListFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFilesResponse(rsp)
}

// MovePathWithBodyWithResponse request with arbitrary body returning *MovePathResponse
func (c *ClientWithResponses) MovePathWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MovePathResponse, error) {
	rsp, err := c.MovePathWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovePathResponse(rsp)
}

func (c *ClientWithResponses) MovePathWithResponse(ctx context.Context, body MovePathJSONRequestBody, reqEditors ...RequestEditorFn) (*MovePathResponse, error) {
	rsp, err := c.MovePath(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovePathResponse(rsp)
}

// ReadFileWithResponse request returning *ReadFileResponse
func (c *ClientWithResponses) ReadFileWithResponse(ctx context.Context, params *ReadFileParams, reqEditors ...RequestEditorFn) (*ReadFileResponse, error) {
	rsp, err := c.ReadFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadFileResponse(rsp)
}

// SetFilePermissionsWithBodyWithResponse request with arbitrary body returning *SetFilePermissionsResponse
func (c *ClientWithResponses) SetFilePermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetFilePermissionsResponse, error) {
	rsp, err := c.SetFilePermissionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetFilePermissionsResponse(rsp)
}

func (c *ClientWithResponses) SetFilePermissionsWithResponse(ctx context.Context, body SetFilePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetFilePermissionsResponse, error) {
	rsp, err := c.SetFilePermissions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetFilePermissionsResponse(rsp)
}

// UploadFilesWithBodyWithResponse request with arbitrary body returning *UploadFilesResponse
func (c *ClientWithResponses) UploadFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFilesResponse, error) {
	rsp, err := c.UploadFilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadFilesResponse(rsp)
}

// UploadZipWithBodyWithResponse request with arbitrary body returning *UploadZipResponse
func (c *ClientWithResponses) UploadZipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadZipResponse, error) {
	rsp, err := c.UploadZipWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadZipResponse(rsp)
}

// StartFsWatchWithBodyWithResponse request with arbitrary body returning *StartFsWatchResponse
func (c *ClientWithResponses) StartFsWatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartFsWatchResponse, error) {
	rsp, err := c.StartFsWatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartFsWatchResponse(rsp)
}

func (c *ClientWithResponses) StartFsWatchWithResponse(ctx context.Context, body StartFsWatchJSONRequestBody, reqEditors ...RequestEditorFn) (*StartFsWatchResponse, error) {
	rsp, err := c.StartFsWatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartFsWatchResponse(rsp)
}

// StopFsWatchWithResponse request returning *StopFsWatchResponse
func (c *ClientWithResponses) StopFsWatchWithResponse(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*StopFsWatchResponse, error) {
	rsp, err := c.StopFsWatch(ctx, watchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopFsWatchResponse(rsp)
}

// StreamFsEventsWithResponse request returning *StreamFsEventsResponse
func (c *ClientWithResponses) StreamFsEventsWithResponse(ctx context.Context, watchId string, reqEditors ...RequestEditorFn) (*StreamFsEventsResponse, error) {
	rsp, err := c.StreamFsEvents(ctx, watchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStreamFsEventsResponse(rsp)
}

// WriteFileWithBodyWithResponse request with arbitrary body returning *WriteFileResponse
func (c *ClientWithResponses) WriteFileWithBodyWithResponse(ctx context.Context, params *WriteFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WriteFileResponse, error) {
	rsp, err := c.WriteFileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWriteFileResponse(rsp)
}

// LogsStreamWithResponse request returning *LogsStreamResponse
func (c *ClientWithResponses) LogsStreamWithResponse(ctx context.Context, params *LogsStreamParams, reqEditors ...RequestEditorFn) (*LogsStreamResponse, error) {
	rsp, err := c.LogsStream(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogsStreamResponse(rsp)
}

// ProcessExecWithBodyWithResponse request with arbitrary body returning *ProcessExecResponse
func (c *ClientWithResponses) ProcessExecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessExecResponse, error) {
	rsp, err := c.ProcessExecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessExecResponse(rsp)
}

func (c *ClientWithResponses) ProcessExecWithResponse(ctx context.Context, body ProcessExecJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessExecResponse, error) {
	rsp, err := c.ProcessExec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessExecResponse(rsp)
}

// ProcessSpawnWithBodyWithResponse request with arbitrary body returning *ProcessSpawnResponse
func (c *ClientWithResponses) ProcessSpawnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessSpawnResponse, error) {
	rsp, err := c.ProcessSpawnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessSpawnResponse(rsp)
}

func (c *ClientWithResponses) ProcessSpawnWithResponse(ctx context.Context, body ProcessSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessSpawnResponse, error) {
	rsp, err := c.ProcessSpawn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessSpawnResponse(rsp)
}

// ProcessKillWithBodyWithResponse request with arbitrary body returning *ProcessKillResponse
func (c *ClientWithResponses) ProcessKillWithBodyWithResponse(ctx context.Context, processId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessKillResponse, error) {
	rsp, err := c.ProcessKillWithBody(ctx, processId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessKillResponse(rsp)
}

func (c *ClientWithResponses) ProcessKillWithResponse(ctx context.Context, processId openapi_types.UUID, body ProcessKillJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessKillResponse, error) {
	rsp, err := c.ProcessKill(ctx, processId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessKillResponse(rsp)
}

// ProcessStatusWithResponse request returning *ProcessStatusResponse
func (c *ClientWithResponses) ProcessStatusWithResponse(ctx context.Context, processId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ProcessStatusResponse, error) {
	rsp, err := c.ProcessStatus(ctx, processId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessStatusResponse(rsp)
}

// ProcessStdinWithBodyWithResponse request with arbitrary body returning *ProcessStdinResponse
func (c *ClientWithResponses) ProcessStdinWithBodyWithResponse(ctx context.Context, processId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProcessStdinResponse, error) {
	rsp, err := c.ProcessStdinWithBody(ctx, processId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessStdinResponse(rsp)
}

func (c *ClientWithResponses) ProcessStdinWithResponse(ctx context.Context, processId openapi_types.UUID, body ProcessStdinJSONRequestBody, reqEditors ...RequestEditorFn) (*ProcessStdinResponse, error) {
	rsp, err := c.ProcessStdin(ctx, processId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessStdinResponse(rsp)
}

// ProcessStdoutStreamWithResponse request returning *ProcessStdoutStreamResponse
func (c *ClientWithResponses) ProcessStdoutStreamWithResponse(ctx context.Context, processId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ProcessStdoutStreamResponse, error) {
	rsp, err := c.ProcessStdoutStream(ctx, processId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessStdoutStreamResponse(rsp)
}

// DeleteRecordingWithBodyWithResponse request with arbitrary body returning *DeleteRecordingResponse
func (c *ClientWithResponses) DeleteRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error) {
	rsp, err := c.DeleteRecordingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingResponse(rsp)
}

func (c *ClientWithResponses) DeleteRecordingWithResponse(ctx context.Context, body DeleteRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error) {
	rsp, err := c.DeleteRecording(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingResponse(rsp)
}

// DownloadRecordingWithResponse request returning *DownloadRecordingResponse
func (c *ClientWithResponses) DownloadRecordingWithResponse(ctx context.Context, params *DownloadRecordingParams, reqEditors ...RequestEditorFn) (*DownloadRecordingResponse, error) {
	rsp, err := c.DownloadRecording(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadRecordingResponse(rsp)
}

// ListRecordersWithResponse request returning *ListRecordersResponse
func (c *ClientWithResponses) ListRecordersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRecordersResponse, error) {
	rsp, err := c.ListRecorders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRecordersResponse(rsp)
}

// StartRecordingWithBodyWithResponse request with arbitrary body returning *StartRecordingResponse
func (c *ClientWithResponses) StartRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRecordingResponse, error) {
	rsp, err := c.StartRecordingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRecordingResponse(rsp)
}

func (c *ClientWithResponses) StartRecordingWithResponse(ctx context.Context, body StartRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRecordingResponse, error) {
	rsp, err := c.StartRecording(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRecordingResponse(rsp)
}

// StopRecordingWithBodyWithResponse request with arbitrary body returning *StopRecordingResponse
func (c *ClientWithResponses) StopRecordingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopRecordingResponse, error) {
	rsp, err := c.StopRecordingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopRecordingResponse(rsp)
}

func (c *ClientWithResponses) StopRecordingWithResponse(ctx context.Context, body StopRecordingJSONRequestBody, reqEditors ...RequestEditorFn) (*StopRecordingResponse, error) {
	rsp, err := c.StopRecording(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopRecordingResponse(rsp)
}

// ParseUploadExtensionsAndRestartResponse parses an HTTP response from a UploadExtensionsAndRestartWithResponse call
func ParseUploadExtensionsAndRestartResponse(rsp *http.Response) (*UploadExtensionsAndRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadExtensionsAndRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseClickMouseResponse parses an HTTP response from a ClickMouseWithResponse call
func ParseClickMouseResponse(rsp *http.Response) (*ClickMouseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClickMouseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMoveMouseResponse parses an HTTP response from a MoveMouseWithResponse call
func ParseMoveMouseResponse(rsp *http.Response) (*MoveMouseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveMouseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTakeScreenshotResponse parses an HTTP response from a TakeScreenshotWithResponse call
func ParseTakeScreenshotResponse(rsp *http.Response) (*TakeScreenshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TakeScreenshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchDisplayResponse parses an HTTP response from a PatchDisplayWithResponse call
func ParsePatchDisplayResponse(rsp *http.Response) (*PatchDisplayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDisplayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DisplayConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDirectoryResponse parses an HTTP response from a CreateDirectoryWithResponse call
func ParseCreateDirectoryResponse(rsp *http.Response) (*CreateDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDirectoryResponse parses an HTTP response from a DeleteDirectoryWithResponse call
func ParseDeleteDirectoryResponse(rsp *http.Response) (*DeleteDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFileResponse parses an HTTP response from a DeleteFileWithResponse call
func ParseDeleteFileResponse(rsp *http.Response) (*DeleteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadDirZipResponse parses an HTTP response from a DownloadDirZipWithResponse call
func ParseDownloadDirZipResponse(rsp *http.Response) (*DownloadDirZipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadDirZipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFileInfoResponse parses an HTTP response from a FileInfoWithResponse call
func ParseFileInfoResponse(rsp *http.Response) (*FileInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FileInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListFilesResponse parses an HTTP response from a ListFilesWithResponse call
func ParseListFilesResponse(rsp *http.Response) (*ListFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMovePathResponse parses an HTTP response from a MovePathWithResponse call
func ParseMovePathResponse(rsp *http.Response) (*MovePathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MovePathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReadFileResponse parses an HTTP response from a ReadFileWithResponse call
func ParseReadFileResponse(rsp *http.Response) (*ReadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSetFilePermissionsResponse parses an HTTP response from a SetFilePermissionsWithResponse call
func ParseSetFilePermissionsResponse(rsp *http.Response) (*SetFilePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetFilePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadFilesResponse parses an HTTP response from a UploadFilesWithResponse call
func ParseUploadFilesResponse(rsp *http.Response) (*UploadFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadZipResponse parses an HTTP response from a UploadZipWithResponse call
func ParseUploadZipResponse(rsp *http.Response) (*UploadZipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadZipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartFsWatchResponse parses an HTTP response from a StartFsWatchWithResponse call
func ParseStartFsWatchResponse(rsp *http.Response) (*StartFsWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartFsWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// WatchId Unique identifier for the directory watch
			WatchId *string `json:"watch_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStopFsWatchResponse parses an HTTP response from a StopFsWatchWithResponse call
func ParseStopFsWatchResponse(rsp *http.Response) (*StopFsWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopFsWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStreamFsEventsResponse parses an HTTP response from a StreamFsEventsWithResponse call
func ParseStreamFsEventsResponse(rsp *http.Response) (*StreamFsEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StreamFsEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseWriteFileResponse parses an HTTP response from a WriteFileWithResponse call
func ParseWriteFileResponse(rsp *http.Response) (*WriteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WriteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseLogsStreamResponse parses an HTTP response from a LogsStreamWithResponse call
func ParseLogsStreamResponse(rsp *http.Response) (*LogsStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogsStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProcessExecResponse parses an HTTP response from a ProcessExecWithResponse call
func ParseProcessExecResponse(rsp *http.Response) (*ProcessExecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessExecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessExecResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseProcessSpawnResponse parses an HTTP response from a ProcessSpawnWithResponse call
func ParseProcessSpawnResponse(rsp *http.Response) (*ProcessSpawnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessSpawnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessSpawnResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseProcessKillResponse parses an HTTP response from a ProcessKillWithResponse call
func ParseProcessKillResponse(rsp *http.Response) (*ProcessKillResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessKillResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseProcessStatusResponse parses an HTTP response from a ProcessStatusWithResponse call
func ParseProcessStatusResponse(rsp *http.Response) (*ProcessStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseProcessStdinResponse parses an HTTP response from a ProcessStdinWithResponse call
func ParseProcessStdinResponse(rsp *http.Response) (*ProcessStdinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessStdinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessStdinResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseProcessStdoutStreamResponse parses an HTTP response from a ProcessStdoutStreamWithResponse call
func ParseProcessStdoutStreamResponse(rsp *http.Response) (*ProcessStdoutStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessStdoutStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRecordingResponse parses an HTTP response from a DeleteRecordingWithResponse call
func ParseDeleteRecordingResponse(rsp *http.Response) (*DeleteRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadRecordingResponse parses an HTTP response from a DownloadRecordingWithResponse call
func ParseDownloadRecordingResponse(rsp *http.Response) (*DownloadRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListRecordersResponse parses an HTTP response from a ListRecordersWithResponse call
func ParseListRecordersResponse(rsp *http.Response) (*ListRecordersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRecordersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RecorderInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartRecordingResponse parses an HTTP response from a StartRecordingWithResponse call
func ParseStartRecordingResponse(rsp *http.Response) (*StartRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStopRecordingResponse parses an HTTP response from a StopRecordingWithResponse call
func ParseStopRecordingResponse(rsp *http.Response) (*StopRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload one or more unpacked extensions (as zips) and restart Chromium
	// (POST /chromium/upload-extensions-and-restart)
	UploadExtensionsAndRestart(w http.ResponseWriter, r *http.Request)
	// Simulate a mouse click action on the host computer
	// (POST /computer/click_mouse)
	ClickMouse(w http.ResponseWriter, r *http.Request)
	// Move the mouse cursor to the specified coordinates on the host computer
	// (POST /computer/move_mouse)
	MoveMouse(w http.ResponseWriter, r *http.Request)
	// Capture a screenshot of the host computer
	// (POST /computer/screenshot)
	TakeScreenshot(w http.ResponseWriter, r *http.Request)
	// Update display configuration
	// (PATCH /display)
	PatchDisplay(w http.ResponseWriter, r *http.Request)
	// Create a new directory
	// (PUT /fs/create_directory)
	CreateDirectory(w http.ResponseWriter, r *http.Request)
	// Delete a directory
	// (PUT /fs/delete_directory)
	DeleteDirectory(w http.ResponseWriter, r *http.Request)
	// Delete a file
	// (PUT /fs/delete_file)
	DeleteFile(w http.ResponseWriter, r *http.Request)
	// Download a directory as a ZIP archive
	// (GET /fs/download_dir_zip)
	DownloadDirZip(w http.ResponseWriter, r *http.Request, params DownloadDirZipParams)
	// Get information about a file or directory
	// (GET /fs/file_info)
	FileInfo(w http.ResponseWriter, r *http.Request, params FileInfoParams)
	// List files in a directory
	// (GET /fs/list_files)
	ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams)
	// Move or rename a file or directory
	// (PUT /fs/move)
	MovePath(w http.ResponseWriter, r *http.Request)
	// Read file contents
	// (GET /fs/read_file)
	ReadFile(w http.ResponseWriter, r *http.Request, params ReadFileParams)
	// Set file or directory permissions/ownership
	// (PUT /fs/set_file_permissions)
	SetFilePermissions(w http.ResponseWriter, r *http.Request)
	// Upload one or more files
	// (POST /fs/upload)
	UploadFiles(w http.ResponseWriter, r *http.Request)
	// Upload a zip archive and extract it
	// (POST /fs/upload_zip)
	UploadZip(w http.ResponseWriter, r *http.Request)
	// Watch a directory for changes
	// (POST /fs/watch)
	StartFsWatch(w http.ResponseWriter, r *http.Request)
	// Stop watching a directory
	// (DELETE /fs/watch/{watch_id})
	StopFsWatch(w http.ResponseWriter, r *http.Request, watchId string)
	// Stream filesystem events for a watch
	// (GET /fs/watch/{watch_id}/events)
	StreamFsEvents(w http.ResponseWriter, r *http.Request, watchId string)
	// Write or create a file
	// (PUT /fs/write_file)
	WriteFile(w http.ResponseWriter, r *http.Request, params WriteFileParams)
	// Stream logs over SSE
	// (GET /logs/stream)
	LogsStream(w http.ResponseWriter, r *http.Request, params LogsStreamParams)
	// Execute a command synchronously
	// (POST /process/exec)
	ProcessExec(w http.ResponseWriter, r *http.Request)
	// Execute a command asynchronously
	// (POST /process/spawn)
	ProcessSpawn(w http.ResponseWriter, r *http.Request)
	// Send signal to process
	// (POST /process/{process_id}/kill)
	ProcessKill(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID)
	// Get process status
	// (GET /process/{process_id}/status)
	ProcessStatus(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID)
	// Write to process stdin
	// (POST /process/{process_id}/stdin)
	ProcessStdin(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID)
	// Stream process stdout over SSE
	// (GET /process/{process_id}/stdout/stream)
	ProcessStdoutStream(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID)
	// Delete a previously recorded video file
	// (POST /recording/delete)
	DeleteRecording(w http.ResponseWriter, r *http.Request)
	// Download the most recently recorded video file
	// (GET /recording/download)
	DownloadRecording(w http.ResponseWriter, r *http.Request, params DownloadRecordingParams)
	// List all recorders
	// (GET /recording/list)
	ListRecorders(w http.ResponseWriter, r *http.Request)
	// Start a screen recording. Only one recording per ID can be registered at a time.
	// (POST /recording/start)
	StartRecording(w http.ResponseWriter, r *http.Request)
	// Stop the recording
	// (POST /recording/stop)
	StopRecording(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Upload one or more unpacked extensions (as zips) and restart Chromium
// (POST /chromium/upload-extensions-and-restart)
func (_ Unimplemented) UploadExtensionsAndRestart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate a mouse click action on the host computer
// (POST /computer/click_mouse)
func (_ Unimplemented) ClickMouse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move the mouse cursor to the specified coordinates on the host computer
// (POST /computer/move_mouse)
func (_ Unimplemented) MoveMouse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Capture a screenshot of the host computer
// (POST /computer/screenshot)
func (_ Unimplemented) TakeScreenshot(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update display configuration
// (PATCH /display)
func (_ Unimplemented) PatchDisplay(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new directory
// (PUT /fs/create_directory)
func (_ Unimplemented) CreateDirectory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a directory
// (PUT /fs/delete_directory)
func (_ Unimplemented) DeleteDirectory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a file
// (PUT /fs/delete_file)
func (_ Unimplemented) DeleteFile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Download a directory as a ZIP archive
// (GET /fs/download_dir_zip)
func (_ Unimplemented) DownloadDirZip(w http.ResponseWriter, r *http.Request, params DownloadDirZipParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get information about a file or directory
// (GET /fs/file_info)
func (_ Unimplemented) FileInfo(w http.ResponseWriter, r *http.Request, params FileInfoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List files in a directory
// (GET /fs/list_files)
func (_ Unimplemented) ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move or rename a file or directory
// (PUT /fs/move)
func (_ Unimplemented) MovePath(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read file contents
// (GET /fs/read_file)
func (_ Unimplemented) ReadFile(w http.ResponseWriter, r *http.Request, params ReadFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set file or directory permissions/ownership
// (PUT /fs/set_file_permissions)
func (_ Unimplemented) SetFilePermissions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload one or more files
// (POST /fs/upload)
func (_ Unimplemented) UploadFiles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload a zip archive and extract it
// (POST /fs/upload_zip)
func (_ Unimplemented) UploadZip(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Watch a directory for changes
// (POST /fs/watch)
func (_ Unimplemented) StartFsWatch(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stop watching a directory
// (DELETE /fs/watch/{watch_id})
func (_ Unimplemented) StopFsWatch(w http.ResponseWriter, r *http.Request, watchId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stream filesystem events for a watch
// (GET /fs/watch/{watch_id}/events)
func (_ Unimplemented) StreamFsEvents(w http.ResponseWriter, r *http.Request, watchId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write or create a file
// (PUT /fs/write_file)
func (_ Unimplemented) WriteFile(w http.ResponseWriter, r *http.Request, params WriteFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stream logs over SSE
// (GET /logs/stream)
func (_ Unimplemented) LogsStream(w http.ResponseWriter, r *http.Request, params LogsStreamParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Execute a command synchronously
// (POST /process/exec)
func (_ Unimplemented) ProcessExec(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Execute a command asynchronously
// (POST /process/spawn)
func (_ Unimplemented) ProcessSpawn(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send signal to process
// (POST /process/{process_id}/kill)
func (_ Unimplemented) ProcessKill(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get process status
// (GET /process/{process_id}/status)
func (_ Unimplemented) ProcessStatus(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write to process stdin
// (POST /process/{process_id}/stdin)
func (_ Unimplemented) ProcessStdin(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stream process stdout over SSE
// (GET /process/{process_id}/stdout/stream)
func (_ Unimplemented) ProcessStdoutStream(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a previously recorded video file
// (POST /recording/delete)
func (_ Unimplemented) DeleteRecording(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Download the most recently recorded video file
// (GET /recording/download)
func (_ Unimplemented) DownloadRecording(w http.ResponseWriter, r *http.Request, params DownloadRecordingParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all recorders
// (GET /recording/list)
func (_ Unimplemented) ListRecorders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Start a screen recording. Only one recording per ID can be registered at a time.
// (POST /recording/start)
func (_ Unimplemented) StartRecording(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stop the recording
// (POST /recording/stop)
func (_ Unimplemented) StopRecording(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UploadExtensionsAndRestart operation middleware
func (siw *ServerInterfaceWrapper) UploadExtensionsAndRestart(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadExtensionsAndRestart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClickMouse operation middleware
func (siw *ServerInterfaceWrapper) ClickMouse(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClickMouse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MoveMouse operation middleware
func (siw *ServerInterfaceWrapper) MoveMouse(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveMouse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TakeScreenshot operation middleware
func (siw *ServerInterfaceWrapper) TakeScreenshot(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TakeScreenshot(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchDisplay operation middleware
func (siw *ServerInterfaceWrapper) PatchDisplay(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchDisplay(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDirectory operation middleware
func (siw *ServerInterfaceWrapper) CreateDirectory(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDirectory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDirectory operation middleware
func (siw *ServerInterfaceWrapper) DeleteDirectory(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDirectory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DownloadDirZip operation middleware
func (siw *ServerInterfaceWrapper) DownloadDirZip(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DownloadDirZipParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadDirZip(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FileInfo operation middleware
func (siw *ServerInterfaceWrapper) FileInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FileInfoParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FileInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFiles operation middleware
func (siw *ServerInterfaceWrapper) ListFiles(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFilesParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MovePath operation middleware
func (siw *ServerInterfaceWrapper) MovePath(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MovePath(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadFile operation middleware
func (siw *ServerInterfaceWrapper) ReadFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadFileParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadFile(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetFilePermissions operation middleware
func (siw *ServerInterfaceWrapper) SetFilePermissions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetFilePermissions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadFiles operation middleware
func (siw *ServerInterfaceWrapper) UploadFiles(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadFiles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadZip operation middleware
func (siw *ServerInterfaceWrapper) UploadZip(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadZip(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StartFsWatch operation middleware
func (siw *ServerInterfaceWrapper) StartFsWatch(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartFsWatch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StopFsWatch operation middleware
func (siw *ServerInterfaceWrapper) StopFsWatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "watch_id" -------------
	var watchId string

	err = runtime.BindStyledParameterWithOptions("simple", "watch_id", chi.URLParam(r, "watch_id"), &watchId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "watch_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopFsWatch(w, r, watchId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StreamFsEvents operation middleware
func (siw *ServerInterfaceWrapper) StreamFsEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "watch_id" -------------
	var watchId string

	err = runtime.BindStyledParameterWithOptions("simple", "watch_id", chi.URLParam(r, "watch_id"), &watchId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "watch_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StreamFsEvents(w, r, watchId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// WriteFile operation middleware
func (siw *ServerInterfaceWrapper) WriteFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WriteFileParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "mode", r.URL.Query(), &params.Mode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WriteFile(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LogsStream operation middleware
func (siw *ServerInterfaceWrapper) LogsStream(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LogsStreamParams

	// ------------- Required query parameter "source" -------------

	if paramValue := r.URL.Query().Get("source"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "source"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "source", r.URL.Query(), &params.Source)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "source", Err: err})
		return
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", r.URL.Query(), &params.Follow)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "follow", Err: err})
		return
	}

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "supervisor_process" -------------

	err = runtime.BindQueryParameter("form", true, false, "supervisor_process", r.URL.Query(), &params.SupervisorProcess)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisor_process", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogsStream(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProcessExec operation middleware
func (siw *ServerInterfaceWrapper) ProcessExec(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessExec(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProcessSpawn operation middleware
func (siw *ServerInterfaceWrapper) ProcessSpawn(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessSpawn(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProcessKill operation middleware
func (siw *ServerInterfaceWrapper) ProcessKill(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "process_id" -------------
	var processId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "process_id", chi.URLParam(r, "process_id"), &processId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "process_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessKill(w, r, processId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProcessStatus operation middleware
func (siw *ServerInterfaceWrapper) ProcessStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "process_id" -------------
	var processId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "process_id", chi.URLParam(r, "process_id"), &processId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "process_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessStatus(w, r, processId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProcessStdin operation middleware
func (siw *ServerInterfaceWrapper) ProcessStdin(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "process_id" -------------
	var processId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "process_id", chi.URLParam(r, "process_id"), &processId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "process_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessStdin(w, r, processId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProcessStdoutStream operation middleware
func (siw *ServerInterfaceWrapper) ProcessStdoutStream(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "process_id" -------------
	var processId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "process_id", chi.URLParam(r, "process_id"), &processId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "process_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessStdoutStream(w, r, processId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteRecording operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecording(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRecording(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DownloadRecording operation middleware
func (siw *ServerInterfaceWrapper) DownloadRecording(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DownloadRecordingParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadRecording(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRecorders operation middleware
func (siw *ServerInterfaceWrapper) ListRecorders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRecorders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StartRecording operation middleware
func (siw *ServerInterfaceWrapper) StartRecording(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartRecording(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StopRecording operation middleware
func (siw *ServerInterfaceWrapper) StopRecording(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopRecording(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/chromium/upload-extensions-and-restart", wrapper.UploadExtensionsAndRestart)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/computer/click_mouse", wrapper.ClickMouse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/computer/move_mouse", wrapper.MoveMouse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/computer/screenshot", wrapper.TakeScreenshot)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/display", wrapper.PatchDisplay)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/fs/create_directory", wrapper.CreateDirectory)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/fs/delete_directory", wrapper.DeleteDirectory)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/fs/delete_file", wrapper.DeleteFile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/download_dir_zip", wrapper.DownloadDirZip)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/file_info", wrapper.FileInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/list_files", wrapper.ListFiles)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/fs/move", wrapper.MovePath)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/read_file", wrapper.ReadFile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/fs/set_file_permissions", wrapper.SetFilePermissions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/upload", wrapper.UploadFiles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/upload_zip", wrapper.UploadZip)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fs/watch", wrapper.StartFsWatch)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/fs/watch/{watch_id}", wrapper.StopFsWatch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fs/watch/{watch_id}/events", wrapper.StreamFsEvents)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/fs/write_file", wrapper.WriteFile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/logs/stream", wrapper.LogsStream)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process/exec", wrapper.ProcessExec)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process/spawn", wrapper.ProcessSpawn)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process/{process_id}/kill", wrapper.ProcessKill)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process/{process_id}/status", wrapper.ProcessStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process/{process_id}/stdin", wrapper.ProcessStdin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process/{process_id}/stdout/stream", wrapper.ProcessStdoutStream)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recording/delete", wrapper.DeleteRecording)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recording/download", wrapper.DownloadRecording)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recording/list", wrapper.ListRecorders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recording/start", wrapper.StartRecording)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recording/stop", wrapper.StopRecording)
	})

	return r
}

type BadRequestErrorJSONResponse Error

type ConflictErrorJSONResponse Error

type InternalErrorJSONResponse Error

type NotFoundErrorJSONResponse Error

type UploadExtensionsAndRestartRequestObject struct {
	Body *multipart.Reader
}

type UploadExtensionsAndRestartResponseObject interface {
	VisitUploadExtensionsAndRestartResponse(w http.ResponseWriter) error
}

type UploadExtensionsAndRestart201Response struct {
}

func (response UploadExtensionsAndRestart201Response) VisitUploadExtensionsAndRestartResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UploadExtensionsAndRestart400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UploadExtensionsAndRestart400JSONResponse) VisitUploadExtensionsAndRestartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UploadExtensionsAndRestart500JSONResponse struct{ InternalErrorJSONResponse }

func (response UploadExtensionsAndRestart500JSONResponse) VisitUploadExtensionsAndRestartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClickMouseRequestObject struct {
	Body *ClickMouseJSONRequestBody
}

type ClickMouseResponseObject interface {
	VisitClickMouseResponse(w http.ResponseWriter) error
}

type ClickMouse200Response struct {
}

func (response ClickMouse200Response) VisitClickMouseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ClickMouse400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ClickMouse400JSONResponse) VisitClickMouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClickMouse500JSONResponse struct{ InternalErrorJSONResponse }

func (response ClickMouse500JSONResponse) VisitClickMouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MoveMouseRequestObject struct {
	Body *MoveMouseJSONRequestBody
}

type MoveMouseResponseObject interface {
	VisitMoveMouseResponse(w http.ResponseWriter) error
}

type MoveMouse200Response struct {
}

func (response MoveMouse200Response) VisitMoveMouseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MoveMouse400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response MoveMouse400JSONResponse) VisitMoveMouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type MoveMouse500JSONResponse struct{ InternalErrorJSONResponse }

func (response MoveMouse500JSONResponse) VisitMoveMouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TakeScreenshotRequestObject struct {
	Body *TakeScreenshotJSONRequestBody
}

type TakeScreenshotResponseObject interface {
	VisitTakeScreenshotResponse(w http.ResponseWriter) error
}

type TakeScreenshot200ImagepngResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response TakeScreenshot200ImagepngResponse) VisitTakeScreenshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type TakeScreenshot400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response TakeScreenshot400JSONResponse) VisitTakeScreenshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TakeScreenshot500JSONResponse struct{ InternalErrorJSONResponse }

func (response TakeScreenshot500JSONResponse) VisitTakeScreenshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchDisplayRequestObject struct {
	Body *PatchDisplayJSONRequestBody
}

type PatchDisplayResponseObject interface {
	VisitPatchDisplayResponse(w http.ResponseWriter) error
}

type PatchDisplay200JSONResponse DisplayConfig

func (response PatchDisplay200JSONResponse) VisitPatchDisplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchDisplay400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PatchDisplay400JSONResponse) VisitPatchDisplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchDisplay409JSONResponse struct{ ConflictErrorJSONResponse }

func (response PatchDisplay409JSONResponse) VisitPatchDisplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchDisplay500JSONResponse struct{ InternalErrorJSONResponse }

func (response PatchDisplay500JSONResponse) VisitPatchDisplayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateDirectoryRequestObject struct {
	Body *CreateDirectoryJSONRequestBody
}

type CreateDirectoryResponseObject interface {
	VisitCreateDirectoryResponse(w http.ResponseWriter) error
}

type CreateDirectory201Response struct {
}

func (response CreateDirectory201Response) VisitCreateDirectoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateDirectory400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateDirectory400JSONResponse) VisitCreateDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDirectory500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateDirectory500JSONResponse) VisitCreateDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDirectoryRequestObject struct {
	Body *DeleteDirectoryJSONRequestBody
}

type DeleteDirectoryResponseObject interface {
	VisitDeleteDirectoryResponse(w http.ResponseWriter) error
}

type DeleteDirectory200Response struct {
}

func (response DeleteDirectory200Response) VisitDeleteDirectoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteDirectory400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteDirectory400JSONResponse) VisitDeleteDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDirectory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteDirectory404JSONResponse) VisitDeleteDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDirectory500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteDirectory500JSONResponse) VisitDeleteDirectoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFileRequestObject struct {
	Body *DeleteFileJSONRequestBody
}

type DeleteFileResponseObject interface {
	VisitDeleteFileResponse(w http.ResponseWriter) error
}

type DeleteFile200Response struct {
}

func (response DeleteFile200Response) VisitDeleteFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFile400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteFile400JSONResponse) VisitDeleteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFile404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteFile404JSONResponse) VisitDeleteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFile500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteFile500JSONResponse) VisitDeleteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DownloadDirZipRequestObject struct {
	Params DownloadDirZipParams
}

type DownloadDirZipResponseObject interface {
	VisitDownloadDirZipResponse(w http.ResponseWriter) error
}

type DownloadDirZip200ApplicationzipResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadDirZip200ApplicationzipResponse) VisitDownloadDirZipResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/zip")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadDirZip400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DownloadDirZip400JSONResponse) VisitDownloadDirZipResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DownloadDirZip404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DownloadDirZip404JSONResponse) VisitDownloadDirZipResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DownloadDirZip500JSONResponse struct{ InternalErrorJSONResponse }

func (response DownloadDirZip500JSONResponse) VisitDownloadDirZipResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type FileInfoRequestObject struct {
	Params FileInfoParams
}

type FileInfoResponseObject interface {
	VisitFileInfoResponse(w http.ResponseWriter) error
}

type FileInfo200JSONResponse FileInfo

func (response FileInfo200JSONResponse) VisitFileInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FileInfo400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response FileInfo400JSONResponse) VisitFileInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FileInfo404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response FileInfo404JSONResponse) VisitFileInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FileInfo500JSONResponse struct{ InternalErrorJSONResponse }

func (response FileInfo500JSONResponse) VisitFileInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListFilesRequestObject struct {
	Params ListFilesParams
}

type ListFilesResponseObject interface {
	VisitListFilesResponse(w http.ResponseWriter) error
}

type ListFiles200JSONResponse ListFiles

func (response ListFiles200JSONResponse) VisitListFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFiles400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ListFiles400JSONResponse) VisitListFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListFiles404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListFiles404JSONResponse) VisitListFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListFiles500JSONResponse struct{ InternalErrorJSONResponse }

func (response ListFiles500JSONResponse) VisitListFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MovePathRequestObject struct {
	Body *MovePathJSONRequestBody
}

type MovePathResponseObject interface {
	VisitMovePathResponse(w http.ResponseWriter) error
}

type MovePath200Response struct {
}

func (response MovePath200Response) VisitMovePathResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MovePath400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response MovePath400JSONResponse) VisitMovePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type MovePath404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response MovePath404JSONResponse) VisitMovePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MovePath500JSONResponse struct{ InternalErrorJSONResponse }

func (response MovePath500JSONResponse) VisitMovePathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadFileRequestObject struct {
	Params ReadFileParams
}

type ReadFileResponseObject interface {
	VisitReadFileResponse(w http.ResponseWriter) error
}

type ReadFile200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReadFile200ApplicationoctetStreamResponse) VisitReadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReadFile400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ReadFile400JSONResponse) VisitReadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadFile404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ReadFile404JSONResponse) VisitReadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadFile500JSONResponse struct{ InternalErrorJSONResponse }

func (response ReadFile500JSONResponse) VisitReadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SetFilePermissionsRequestObject struct {
	Body *SetFilePermissionsJSONRequestBody
}

type SetFilePermissionsResponseObject interface {
	VisitSetFilePermissionsResponse(w http.ResponseWriter) error
}

type SetFilePermissions200Response struct {
}

func (response SetFilePermissions200Response) VisitSetFilePermissionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetFilePermissions400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response SetFilePermissions400JSONResponse) VisitSetFilePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetFilePermissions404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response SetFilePermissions404JSONResponse) VisitSetFilePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SetFilePermissions500JSONResponse struct{ InternalErrorJSONResponse }

func (response SetFilePermissions500JSONResponse) VisitSetFilePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UploadFilesRequestObject struct {
	Body *multipart.Reader
}

type UploadFilesResponseObject interface {
	VisitUploadFilesResponse(w http.ResponseWriter) error
}

type UploadFiles201Response struct {
}

func (response UploadFiles201Response) VisitUploadFilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UploadFiles400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UploadFiles400JSONResponse) VisitUploadFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UploadFiles404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UploadFiles404JSONResponse) VisitUploadFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UploadFiles500JSONResponse struct{ InternalErrorJSONResponse }

func (response UploadFiles500JSONResponse) VisitUploadFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UploadZipRequestObject struct {
	Body *multipart.Reader
}

type UploadZipResponseObject interface {
	VisitUploadZipResponse(w http.ResponseWriter) error
}

type UploadZip201Response struct {
}

func (response UploadZip201Response) VisitUploadZipResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UploadZip400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UploadZip400JSONResponse) VisitUploadZipResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UploadZip404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UploadZip404JSONResponse) VisitUploadZipResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UploadZip500JSONResponse struct{ InternalErrorJSONResponse }

func (response UploadZip500JSONResponse) VisitUploadZipResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StartFsWatchRequestObject struct {
	Body *StartFsWatchJSONRequestBody
}

type StartFsWatchResponseObject interface {
	VisitStartFsWatchResponse(w http.ResponseWriter) error
}

type StartFsWatch201JSONResponse struct {
	// WatchId Unique identifier for the directory watch
	WatchId *string `json:"watch_id,omitempty"`
}

func (response StartFsWatch201JSONResponse) VisitStartFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type StartFsWatch400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StartFsWatch400JSONResponse) VisitStartFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StartFsWatch404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response StartFsWatch404JSONResponse) VisitStartFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StartFsWatch500JSONResponse struct{ InternalErrorJSONResponse }

func (response StartFsWatch500JSONResponse) VisitStartFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StopFsWatchRequestObject struct {
	WatchId string `json:"watch_id"`
}

type StopFsWatchResponseObject interface {
	VisitStopFsWatchResponse(w http.ResponseWriter) error
}

type StopFsWatch204Response struct {
}

func (response StopFsWatch204Response) VisitStopFsWatchResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type StopFsWatch400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StopFsWatch400JSONResponse) VisitStopFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StopFsWatch404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response StopFsWatch404JSONResponse) VisitStopFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StopFsWatch500JSONResponse struct{ InternalErrorJSONResponse }

func (response StopFsWatch500JSONResponse) VisitStopFsWatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StreamFsEventsRequestObject struct {
	WatchId string `json:"watch_id"`
}

type StreamFsEventsResponseObject interface {
	VisitStreamFsEventsResponse(w http.ResponseWriter) error
}

type StreamFsEvents200ResponseHeaders struct {
	XSSEContentType string
}

type StreamFsEvents200TexteventStreamResponse struct {
	Body          io.Reader
	Headers       StreamFsEvents200ResponseHeaders
	ContentLength int64
}

func (response StreamFsEvents200TexteventStreamResponse) VisitStreamFsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-SSE-Content-Type", fmt.Sprint(response.Headers.XSSEContentType))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	flusher, ok := w.(http.Flusher)
	if !ok {
		// If w doesn't support flushing, might as well use io.Copy
		_, err := io.Copy(w, response.Body)
		return err
	}

	// Use a buffer for efficient copying and flushing
	buf := make([]byte, 4096) // text/event-stream are usually very small messages
	for {
		n, err := response.Body.Read(buf)
		if n > 0 {
			if _, werr := w.Write(buf[:n]); werr != nil {
				return werr
			}
			flusher.Flush() // Flush after each write
		}
		if err != nil {
			if err == io.EOF {
				return nil // End of file, no error
			}
			return err
		}
	}
}

type StreamFsEvents400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StreamFsEvents400JSONResponse) VisitStreamFsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StreamFsEvents404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response StreamFsEvents404JSONResponse) VisitStreamFsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StreamFsEvents500JSONResponse struct{ InternalErrorJSONResponse }

func (response StreamFsEvents500JSONResponse) VisitStreamFsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type WriteFileRequestObject struct {
	Params WriteFileParams
	Body   io.Reader
}

type WriteFileResponseObject interface {
	VisitWriteFileResponse(w http.ResponseWriter) error
}

type WriteFile201Response struct {
}

func (response WriteFile201Response) VisitWriteFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type WriteFile400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response WriteFile400JSONResponse) VisitWriteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type WriteFile404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response WriteFile404JSONResponse) VisitWriteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type WriteFile500JSONResponse struct{ InternalErrorJSONResponse }

func (response WriteFile500JSONResponse) VisitWriteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LogsStreamRequestObject struct {
	Params LogsStreamParams
}

type LogsStreamResponseObject interface {
	VisitLogsStreamResponse(w http.ResponseWriter) error
}

type LogsStream200ResponseHeaders struct {
	XSSEContentType string
}

type LogsStream200TexteventStreamResponse struct {
	Body          io.Reader
	Headers       LogsStream200ResponseHeaders
	ContentLength int64
}

func (response LogsStream200TexteventStreamResponse) VisitLogsStreamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-SSE-Content-Type", fmt.Sprint(response.Headers.XSSEContentType))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	flusher, ok := w.(http.Flusher)
	if !ok {
		// If w doesn't support flushing, might as well use io.Copy
		_, err := io.Copy(w, response.Body)
		return err
	}

	// Use a buffer for efficient copying and flushing
	buf := make([]byte, 4096) // text/event-stream are usually very small messages
	for {
		n, err := response.Body.Read(buf)
		if n > 0 {
			if _, werr := w.Write(buf[:n]); werr != nil {
				return werr
			}
			flusher.Flush() // Flush after each write
		}
		if err != nil {
			if err == io.EOF {
				return nil // End of file, no error
			}
			return err
		}
	}
}

type ProcessExecRequestObject struct {
	Body *ProcessExecJSONRequestBody
}

type ProcessExecResponseObject interface {
	VisitProcessExecResponse(w http.ResponseWriter) error
}

type ProcessExec200JSONResponse ProcessExecResult

func (response ProcessExec200JSONResponse) VisitProcessExecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProcessExec400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ProcessExec400JSONResponse) VisitProcessExecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProcessExec500JSONResponse struct{ InternalErrorJSONResponse }

func (response ProcessExec500JSONResponse) VisitProcessExecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProcessSpawnRequestObject struct {
	Body *ProcessSpawnJSONRequestBody
}

type ProcessSpawnResponseObject interface {
	VisitProcessSpawnResponse(w http.ResponseWriter) error
}

type ProcessSpawn200JSONResponse ProcessSpawnResult

func (response ProcessSpawn200JSONResponse) VisitProcessSpawnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProcessSpawn400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ProcessSpawn400JSONResponse) VisitProcessSpawnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProcessSpawn500JSONResponse struct{ InternalErrorJSONResponse }

func (response ProcessSpawn500JSONResponse) VisitProcessSpawnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProcessKillRequestObject struct {
	ProcessId openapi_types.UUID `json:"process_id"`
	Body      *ProcessKillJSONRequestBody
}

type ProcessKillResponseObject interface {
	VisitProcessKillResponse(w http.ResponseWriter) error
}

type ProcessKill200JSONResponse OkResponse

func (response ProcessKill200JSONResponse) VisitProcessKillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProcessKill400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ProcessKill400JSONResponse) VisitProcessKillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProcessKill404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ProcessKill404JSONResponse) VisitProcessKillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProcessKill500JSONResponse struct{ InternalErrorJSONResponse }

func (response ProcessKill500JSONResponse) VisitProcessKillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStatusRequestObject struct {
	ProcessId openapi_types.UUID `json:"process_id"`
}

type ProcessStatusResponseObject interface {
	VisitProcessStatusResponse(w http.ResponseWriter) error
}

type ProcessStatus200JSONResponse ProcessStatus

func (response ProcessStatus200JSONResponse) VisitProcessStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStatus400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ProcessStatus400JSONResponse) VisitProcessStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStatus404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ProcessStatus404JSONResponse) VisitProcessStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStatus500JSONResponse struct{ InternalErrorJSONResponse }

func (response ProcessStatus500JSONResponse) VisitProcessStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStdinRequestObject struct {
	ProcessId openapi_types.UUID `json:"process_id"`
	Body      *ProcessStdinJSONRequestBody
}

type ProcessStdinResponseObject interface {
	VisitProcessStdinResponse(w http.ResponseWriter) error
}

type ProcessStdin200JSONResponse ProcessStdinResult

func (response ProcessStdin200JSONResponse) VisitProcessStdinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStdin400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ProcessStdin400JSONResponse) VisitProcessStdinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStdin404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ProcessStdin404JSONResponse) VisitProcessStdinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStdin500JSONResponse struct{ InternalErrorJSONResponse }

func (response ProcessStdin500JSONResponse) VisitProcessStdinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStdoutStreamRequestObject struct {
	ProcessId openapi_types.UUID `json:"process_id"`
}

type ProcessStdoutStreamResponseObject interface {
	VisitProcessStdoutStreamResponse(w http.ResponseWriter) error
}

type ProcessStdoutStream200ResponseHeaders struct {
	XSSEContentType string
}

type ProcessStdoutStream200TexteventStreamResponse struct {
	Body          io.Reader
	Headers       ProcessStdoutStream200ResponseHeaders
	ContentLength int64
}

func (response ProcessStdoutStream200TexteventStreamResponse) VisitProcessStdoutStreamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-SSE-Content-Type", fmt.Sprint(response.Headers.XSSEContentType))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	flusher, ok := w.(http.Flusher)
	if !ok {
		// If w doesn't support flushing, might as well use io.Copy
		_, err := io.Copy(w, response.Body)
		return err
	}

	// Use a buffer for efficient copying and flushing
	buf := make([]byte, 4096) // text/event-stream are usually very small messages
	for {
		n, err := response.Body.Read(buf)
		if n > 0 {
			if _, werr := w.Write(buf[:n]); werr != nil {
				return werr
			}
			flusher.Flush() // Flush after each write
		}
		if err != nil {
			if err == io.EOF {
				return nil // End of file, no error
			}
			return err
		}
	}
}

type ProcessStdoutStream400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ProcessStdoutStream400JSONResponse) VisitProcessStdoutStreamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStdoutStream404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ProcessStdoutStream404JSONResponse) VisitProcessStdoutStreamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProcessStdoutStream500JSONResponse struct{ InternalErrorJSONResponse }

func (response ProcessStdoutStream500JSONResponse) VisitProcessStdoutStreamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecordingRequestObject struct {
	Body *DeleteRecordingJSONRequestBody
}

type DeleteRecordingResponseObject interface {
	VisitDeleteRecordingResponse(w http.ResponseWriter) error
}

type DeleteRecording200Response struct {
}

func (response DeleteRecording200Response) VisitDeleteRecordingResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRecording400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteRecording400JSONResponse) VisitDeleteRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecording404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteRecording404JSONResponse) VisitDeleteRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecording500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteRecording500JSONResponse) VisitDeleteRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DownloadRecordingRequestObject struct {
	Params DownloadRecordingParams
}

type DownloadRecordingResponseObject interface {
	VisitDownloadRecordingResponse(w http.ResponseWriter) error
}

type DownloadRecording200ResponseHeaders struct {
	XRecordingFinishedAt string
	XRecordingStartedAt  string
}

type DownloadRecording200Videomp4Response struct {
	Body          io.Reader
	Headers       DownloadRecording200ResponseHeaders
	ContentLength int64
}

func (response DownloadRecording200Videomp4Response) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "video/mp4")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Recording-Finished-At", fmt.Sprint(response.Headers.XRecordingFinishedAt))
	w.Header().Set("X-Recording-Started-At", fmt.Sprint(response.Headers.XRecordingStartedAt))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadRecording202ResponseHeaders struct {
	RetryAfter int
}

type DownloadRecording202Response struct {
	Headers DownloadRecording202ResponseHeaders
}

func (response DownloadRecording202Response) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(202)
	return nil
}

type DownloadRecording400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DownloadRecording400JSONResponse) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DownloadRecording404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DownloadRecording404JSONResponse) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DownloadRecording500JSONResponse struct{ InternalErrorJSONResponse }

func (response DownloadRecording500JSONResponse) VisitDownloadRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRecordersRequestObject struct {
}

type ListRecordersResponseObject interface {
	VisitListRecordersResponse(w http.ResponseWriter) error
}

type ListRecorders200JSONResponse []RecorderInfo

func (response ListRecorders200JSONResponse) VisitListRecordersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRecorders500JSONResponse struct{ InternalErrorJSONResponse }

func (response ListRecorders500JSONResponse) VisitListRecordersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StartRecordingRequestObject struct {
	Body *StartRecordingJSONRequestBody
}

type StartRecordingResponseObject interface {
	VisitStartRecordingResponse(w http.ResponseWriter) error
}

type StartRecording201Response struct {
}

func (response StartRecording201Response) VisitStartRecordingResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type StartRecording400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StartRecording400JSONResponse) VisitStartRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StartRecording409JSONResponse struct{ ConflictErrorJSONResponse }

func (response StartRecording409JSONResponse) VisitStartRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type StartRecording500JSONResponse struct{ InternalErrorJSONResponse }

func (response StartRecording500JSONResponse) VisitStartRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StopRecordingRequestObject struct {
	Body *StopRecordingJSONRequestBody
}

type StopRecordingResponseObject interface {
	VisitStopRecordingResponse(w http.ResponseWriter) error
}

type StopRecording200Response struct {
}

func (response StopRecording200Response) VisitStopRecordingResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type StopRecording400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response StopRecording400JSONResponse) VisitStopRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StopRecording500JSONResponse struct{ InternalErrorJSONResponse }

func (response StopRecording500JSONResponse) VisitStopRecordingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Upload one or more unpacked extensions (as zips) and restart Chromium
	// (POST /chromium/upload-extensions-and-restart)
	UploadExtensionsAndRestart(ctx context.Context, request UploadExtensionsAndRestartRequestObject) (UploadExtensionsAndRestartResponseObject, error)
	// Simulate a mouse click action on the host computer
	// (POST /computer/click_mouse)
	ClickMouse(ctx context.Context, request ClickMouseRequestObject) (ClickMouseResponseObject, error)
	// Move the mouse cursor to the specified coordinates on the host computer
	// (POST /computer/move_mouse)
	MoveMouse(ctx context.Context, request MoveMouseRequestObject) (MoveMouseResponseObject, error)
	// Capture a screenshot of the host computer
	// (POST /computer/screenshot)
	TakeScreenshot(ctx context.Context, request TakeScreenshotRequestObject) (TakeScreenshotResponseObject, error)
	// Update display configuration
	// (PATCH /display)
	PatchDisplay(ctx context.Context, request PatchDisplayRequestObject) (PatchDisplayResponseObject, error)
	// Create a new directory
	// (PUT /fs/create_directory)
	CreateDirectory(ctx context.Context, request CreateDirectoryRequestObject) (CreateDirectoryResponseObject, error)
	// Delete a directory
	// (PUT /fs/delete_directory)
	DeleteDirectory(ctx context.Context, request DeleteDirectoryRequestObject) (DeleteDirectoryResponseObject, error)
	// Delete a file
	// (PUT /fs/delete_file)
	DeleteFile(ctx context.Context, request DeleteFileRequestObject) (DeleteFileResponseObject, error)
	// Download a directory as a ZIP archive
	// (GET /fs/download_dir_zip)
	DownloadDirZip(ctx context.Context, request DownloadDirZipRequestObject) (DownloadDirZipResponseObject, error)
	// Get information about a file or directory
	// (GET /fs/file_info)
	FileInfo(ctx context.Context, request FileInfoRequestObject) (FileInfoResponseObject, error)
	// List files in a directory
	// (GET /fs/list_files)
	ListFiles(ctx context.Context, request ListFilesRequestObject) (ListFilesResponseObject, error)
	// Move or rename a file or directory
	// (PUT /fs/move)
	MovePath(ctx context.Context, request MovePathRequestObject) (MovePathResponseObject, error)
	// Read file contents
	// (GET /fs/read_file)
	ReadFile(ctx context.Context, request ReadFileRequestObject) (ReadFileResponseObject, error)
	// Set file or directory permissions/ownership
	// (PUT /fs/set_file_permissions)
	SetFilePermissions(ctx context.Context, request SetFilePermissionsRequestObject) (SetFilePermissionsResponseObject, error)
	// Upload one or more files
	// (POST /fs/upload)
	UploadFiles(ctx context.Context, request UploadFilesRequestObject) (UploadFilesResponseObject, error)
	// Upload a zip archive and extract it
	// (POST /fs/upload_zip)
	UploadZip(ctx context.Context, request UploadZipRequestObject) (UploadZipResponseObject, error)
	// Watch a directory for changes
	// (POST /fs/watch)
	StartFsWatch(ctx context.Context, request StartFsWatchRequestObject) (StartFsWatchResponseObject, error)
	// Stop watching a directory
	// (DELETE /fs/watch/{watch_id})
	StopFsWatch(ctx context.Context, request StopFsWatchRequestObject) (StopFsWatchResponseObject, error)
	// Stream filesystem events for a watch
	// (GET /fs/watch/{watch_id}/events)
	StreamFsEvents(ctx context.Context, request StreamFsEventsRequestObject) (StreamFsEventsResponseObject, error)
	// Write or create a file
	// (PUT /fs/write_file)
	WriteFile(ctx context.Context, request WriteFileRequestObject) (WriteFileResponseObject, error)
	// Stream logs over SSE
	// (GET /logs/stream)
	LogsStream(ctx context.Context, request LogsStreamRequestObject) (LogsStreamResponseObject, error)
	// Execute a command synchronously
	// (POST /process/exec)
	ProcessExec(ctx context.Context, request ProcessExecRequestObject) (ProcessExecResponseObject, error)
	// Execute a command asynchronously
	// (POST /process/spawn)
	ProcessSpawn(ctx context.Context, request ProcessSpawnRequestObject) (ProcessSpawnResponseObject, error)
	// Send signal to process
	// (POST /process/{process_id}/kill)
	ProcessKill(ctx context.Context, request ProcessKillRequestObject) (ProcessKillResponseObject, error)
	// Get process status
	// (GET /process/{process_id}/status)
	ProcessStatus(ctx context.Context, request ProcessStatusRequestObject) (ProcessStatusResponseObject, error)
	// Write to process stdin
	// (POST /process/{process_id}/stdin)
	ProcessStdin(ctx context.Context, request ProcessStdinRequestObject) (ProcessStdinResponseObject, error)
	// Stream process stdout over SSE
	// (GET /process/{process_id}/stdout/stream)
	ProcessStdoutStream(ctx context.Context, request ProcessStdoutStreamRequestObject) (ProcessStdoutStreamResponseObject, error)
	// Delete a previously recorded video file
	// (POST /recording/delete)
	DeleteRecording(ctx context.Context, request DeleteRecordingRequestObject) (DeleteRecordingResponseObject, error)
	// Download the most recently recorded video file
	// (GET /recording/download)
	DownloadRecording(ctx context.Context, request DownloadRecordingRequestObject) (DownloadRecordingResponseObject, error)
	// List all recorders
	// (GET /recording/list)
	ListRecorders(ctx context.Context, request ListRecordersRequestObject) (ListRecordersResponseObject, error)
	// Start a screen recording. Only one recording per ID can be registered at a time.
	// (POST /recording/start)
	StartRecording(ctx context.Context, request StartRecordingRequestObject) (StartRecordingResponseObject, error)
	// Stop the recording
	// (POST /recording/stop)
	StopRecording(ctx context.Context, request StopRecordingRequestObject) (StopRecordingResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// UploadExtensionsAndRestart operation middleware
func (sh *strictHandler) UploadExtensionsAndRestart(w http.ResponseWriter, r *http.Request) {
	var request UploadExtensionsAndRestartRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadExtensionsAndRestart(ctx, request.(UploadExtensionsAndRestartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadExtensionsAndRestart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadExtensionsAndRestartResponseObject); ok {
		if err := validResponse.VisitUploadExtensionsAndRestartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClickMouse operation middleware
func (sh *strictHandler) ClickMouse(w http.ResponseWriter, r *http.Request) {
	var request ClickMouseRequestObject

	var body ClickMouseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClickMouse(ctx, request.(ClickMouseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClickMouse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClickMouseResponseObject); ok {
		if err := validResponse.VisitClickMouseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MoveMouse operation middleware
func (sh *strictHandler) MoveMouse(w http.ResponseWriter, r *http.Request) {
	var request MoveMouseRequestObject

	var body MoveMouseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MoveMouse(ctx, request.(MoveMouseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MoveMouse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MoveMouseResponseObject); ok {
		if err := validResponse.VisitMoveMouseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TakeScreenshot operation middleware
func (sh *strictHandler) TakeScreenshot(w http.ResponseWriter, r *http.Request) {
	var request TakeScreenshotRequestObject

	var body TakeScreenshotJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TakeScreenshot(ctx, request.(TakeScreenshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TakeScreenshot")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TakeScreenshotResponseObject); ok {
		if err := validResponse.VisitTakeScreenshotResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchDisplay operation middleware
func (sh *strictHandler) PatchDisplay(w http.ResponseWriter, r *http.Request) {
	var request PatchDisplayRequestObject

	var body PatchDisplayJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchDisplay(ctx, request.(PatchDisplayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchDisplay")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchDisplayResponseObject); ok {
		if err := validResponse.VisitPatchDisplayResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDirectory operation middleware
func (sh *strictHandler) CreateDirectory(w http.ResponseWriter, r *http.Request) {
	var request CreateDirectoryRequestObject

	var body CreateDirectoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDirectory(ctx, request.(CreateDirectoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDirectory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDirectoryResponseObject); ok {
		if err := validResponse.VisitCreateDirectoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDirectory operation middleware
func (sh *strictHandler) DeleteDirectory(w http.ResponseWriter, r *http.Request) {
	var request DeleteDirectoryRequestObject

	var body DeleteDirectoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDirectory(ctx, request.(DeleteDirectoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDirectory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDirectoryResponseObject); ok {
		if err := validResponse.VisitDeleteDirectoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFile operation middleware
func (sh *strictHandler) DeleteFile(w http.ResponseWriter, r *http.Request) {
	var request DeleteFileRequestObject

	var body DeleteFileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFile(ctx, request.(DeleteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFileResponseObject); ok {
		if err := validResponse.VisitDeleteFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DownloadDirZip operation middleware
func (sh *strictHandler) DownloadDirZip(w http.ResponseWriter, r *http.Request, params DownloadDirZipParams) {
	var request DownloadDirZipRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadDirZip(ctx, request.(DownloadDirZipRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadDirZip")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DownloadDirZipResponseObject); ok {
		if err := validResponse.VisitDownloadDirZipResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FileInfo operation middleware
func (sh *strictHandler) FileInfo(w http.ResponseWriter, r *http.Request, params FileInfoParams) {
	var request FileInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FileInfo(ctx, request.(FileInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FileInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FileInfoResponseObject); ok {
		if err := validResponse.VisitFileInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFiles operation middleware
func (sh *strictHandler) ListFiles(w http.ResponseWriter, r *http.Request, params ListFilesParams) {
	var request ListFilesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFiles(ctx, request.(ListFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFiles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFilesResponseObject); ok {
		if err := validResponse.VisitListFilesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MovePath operation middleware
func (sh *strictHandler) MovePath(w http.ResponseWriter, r *http.Request) {
	var request MovePathRequestObject

	var body MovePathJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MovePath(ctx, request.(MovePathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MovePath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MovePathResponseObject); ok {
		if err := validResponse.VisitMovePathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadFile operation middleware
func (sh *strictHandler) ReadFile(w http.ResponseWriter, r *http.Request, params ReadFileParams) {
	var request ReadFileRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadFile(ctx, request.(ReadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadFileResponseObject); ok {
		if err := validResponse.VisitReadFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetFilePermissions operation middleware
func (sh *strictHandler) SetFilePermissions(w http.ResponseWriter, r *http.Request) {
	var request SetFilePermissionsRequestObject

	var body SetFilePermissionsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetFilePermissions(ctx, request.(SetFilePermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetFilePermissions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetFilePermissionsResponseObject); ok {
		if err := validResponse.VisitSetFilePermissionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadFiles operation middleware
func (sh *strictHandler) UploadFiles(w http.ResponseWriter, r *http.Request) {
	var request UploadFilesRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadFiles(ctx, request.(UploadFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadFiles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadFilesResponseObject); ok {
		if err := validResponse.VisitUploadFilesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadZip operation middleware
func (sh *strictHandler) UploadZip(w http.ResponseWriter, r *http.Request) {
	var request UploadZipRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadZip(ctx, request.(UploadZipRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadZip")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadZipResponseObject); ok {
		if err := validResponse.VisitUploadZipResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StartFsWatch operation middleware
func (sh *strictHandler) StartFsWatch(w http.ResponseWriter, r *http.Request) {
	var request StartFsWatchRequestObject

	var body StartFsWatchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StartFsWatch(ctx, request.(StartFsWatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartFsWatch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StartFsWatchResponseObject); ok {
		if err := validResponse.VisitStartFsWatchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StopFsWatch operation middleware
func (sh *strictHandler) StopFsWatch(w http.ResponseWriter, r *http.Request, watchId string) {
	var request StopFsWatchRequestObject

	request.WatchId = watchId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StopFsWatch(ctx, request.(StopFsWatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopFsWatch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StopFsWatchResponseObject); ok {
		if err := validResponse.VisitStopFsWatchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StreamFsEvents operation middleware
func (sh *strictHandler) StreamFsEvents(w http.ResponseWriter, r *http.Request, watchId string) {
	var request StreamFsEventsRequestObject

	request.WatchId = watchId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StreamFsEvents(ctx, request.(StreamFsEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StreamFsEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StreamFsEventsResponseObject); ok {
		if err := validResponse.VisitStreamFsEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// WriteFile operation middleware
func (sh *strictHandler) WriteFile(w http.ResponseWriter, r *http.Request, params WriteFileParams) {
	var request WriteFileRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WriteFile(ctx, request.(WriteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WriteFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WriteFileResponseObject); ok {
		if err := validResponse.VisitWriteFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LogsStream operation middleware
func (sh *strictHandler) LogsStream(w http.ResponseWriter, r *http.Request, params LogsStreamParams) {
	var request LogsStreamRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LogsStream(ctx, request.(LogsStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogsStream")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogsStreamResponseObject); ok {
		if err := validResponse.VisitLogsStreamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessExec operation middleware
func (sh *strictHandler) ProcessExec(w http.ResponseWriter, r *http.Request) {
	var request ProcessExecRequestObject

	var body ProcessExecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessExec(ctx, request.(ProcessExecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessExec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessExecResponseObject); ok {
		if err := validResponse.VisitProcessExecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessSpawn operation middleware
func (sh *strictHandler) ProcessSpawn(w http.ResponseWriter, r *http.Request) {
	var request ProcessSpawnRequestObject

	var body ProcessSpawnJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessSpawn(ctx, request.(ProcessSpawnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessSpawn")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessSpawnResponseObject); ok {
		if err := validResponse.VisitProcessSpawnResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessKill operation middleware
func (sh *strictHandler) ProcessKill(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID) {
	var request ProcessKillRequestObject

	request.ProcessId = processId

	var body ProcessKillJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessKill(ctx, request.(ProcessKillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessKill")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessKillResponseObject); ok {
		if err := validResponse.VisitProcessKillResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessStatus operation middleware
func (sh *strictHandler) ProcessStatus(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID) {
	var request ProcessStatusRequestObject

	request.ProcessId = processId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessStatus(ctx, request.(ProcessStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessStatusResponseObject); ok {
		if err := validResponse.VisitProcessStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessStdin operation middleware
func (sh *strictHandler) ProcessStdin(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID) {
	var request ProcessStdinRequestObject

	request.ProcessId = processId

	var body ProcessStdinJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessStdin(ctx, request.(ProcessStdinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessStdin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessStdinResponseObject); ok {
		if err := validResponse.VisitProcessStdinResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessStdoutStream operation middleware
func (sh *strictHandler) ProcessStdoutStream(w http.ResponseWriter, r *http.Request, processId openapi_types.UUID) {
	var request ProcessStdoutStreamRequestObject

	request.ProcessId = processId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessStdoutStream(ctx, request.(ProcessStdoutStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessStdoutStream")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessStdoutStreamResponseObject); ok {
		if err := validResponse.VisitProcessStdoutStreamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRecording operation middleware
func (sh *strictHandler) DeleteRecording(w http.ResponseWriter, r *http.Request) {
	var request DeleteRecordingRequestObject

	var body DeleteRecordingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRecording(ctx, request.(DeleteRecordingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRecording")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRecordingResponseObject); ok {
		if err := validResponse.VisitDeleteRecordingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DownloadRecording operation middleware
func (sh *strictHandler) DownloadRecording(w http.ResponseWriter, r *http.Request, params DownloadRecordingParams) {
	var request DownloadRecordingRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadRecording(ctx, request.(DownloadRecordingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadRecording")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DownloadRecordingResponseObject); ok {
		if err := validResponse.VisitDownloadRecordingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRecorders operation middleware
func (sh *strictHandler) ListRecorders(w http.ResponseWriter, r *http.Request) {
	var request ListRecordersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRecorders(ctx, request.(ListRecordersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRecorders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRecordersResponseObject); ok {
		if err := validResponse.VisitListRecordersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StartRecording operation middleware
func (sh *strictHandler) StartRecording(w http.ResponseWriter, r *http.Request) {
	var request StartRecordingRequestObject

	var body StartRecordingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StartRecording(ctx, request.(StartRecordingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartRecording")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StartRecordingResponseObject); ok {
		if err := validResponse.VisitStartRecordingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StopRecording operation middleware
func (sh *strictHandler) StopRecording(w http.ResponseWriter, r *http.Request) {
	var request StopRecordingRequestObject

	var body StopRecordingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StopRecording(ctx, request.(StopRecordingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopRecording")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StopRecordingResponseObject); ok {
		if err := validResponse.VisitStopRecordingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9eW/ctpdfhdD+gE1250ritKj/c2OnNZI0gSdBfpvaO6ClpxnWEqmS1Iwngb/74pHU",
	"NaLmsh3HxQIFmowk8vFdfHe+BaFIM8GBaxUcfgskqExwBeYvv9LoDP7OQekTKYXEn0LBNXCNf6RZlrCQ",
	"aib48C8lOP6mwhmkFP/0LwlxcBj8x7Baf2ifqqFd7ebmphdEoELJMlwkOMQNidsxuOkFrwSPExZ+r92L",
	"7XDrU65Bcpp8p62L7cgY5BwkcS/2gj+Efi1yHn0nOP4Qmpj9AnzmXsfVXiUsvHoncgUFfRCAKGL4IU0+",
	"SJGB1Az5JqaJgl6Q1X76FlzmWlsImxuaJYl9SrQgDBFBQ00WTM+CXgA8T4PDP4MEYh30AsmmM/x/yqIo",
	"gaAXXNLwKugFsZALKqPgohfoZQbBYaC0ZHyKKAwR9In9eXX7j8sMiIiJeYfQ0Pxc7RqJBf41zwK3jHeD",
	"mUiiyRUsle94EYsZSIKP8Xz4Loly/JToGdiNg17ANKTm+9bq7gcqJV3i33meTsxXbruY5okODp+1SJmn",
	"lyDxcJqlYDaXkAHVjX3d6oj2KRiOu26f4t8kFEJGjFNtsFUuQDKhmMNZe6Vle6X/2Welm14g4e+cSYiQ",
	"KNcBLl0RQlz+BVZoX0mgGo6ZhFALudyPU1MReRjlfWY/J1GxOsEXyRMRapoQS64egcF0QH5++fLpgBxb",
	"yhjE//zy5SDoBRnVKObBYfC/f476P198e9E7uPlX4GGpjOpZG4ijSyWSXEMNCHwRdwjN0Vc2GQ7+q734",
	"CjbNTj5kHkMCGj5QPdsPjxuOUAAemW3uHvAzCA2jTfeDnkVt2E8j4NqKs2NdWWxSOwk5SrIZ5XkKkoVE",
	"SDJbZjPgq/Sn/a9H/S+j/i/9i//+l/ew7YMxlSV0idcUm+54nhkYzdk606tcSuCaRHZtYt8jjJOMXUOi",
	"vIItIZagZhNJNWxe0r1N8G1c+Pev5ElKl+QSCM+ThLCYcKFJBBpCTS8TeOrddMEiH0Ot7mZeWwu/D7Xl",
	"9bqiC0ApOgWPXl5hxuJFHz++Zgmc8li0l2dqEjHZPtPnGegZSMNiRk6YIrQS+kF1qEshEqAct0lFNEFN",
	"317uLVUatRWLnbVgboSBvTZTqoPDIKIa+uZrjzLya0Q8ltWBl0wr8gRVX4+cB5FcXMs+/nceIPufB325",
	"6Ms+/ncePB34duDUB/evVAHBR4W4xbilkF5MbK078bH3O8W+wuRyqcFzj4/ZV8O75vGAjEhcA4OBGmy+",
	"tswZHXSNzXoFH9Ro6JDexU7jpdKQnsydIdgmjDIvkHBG+RQI4ItGAe3MfjSOIdQQbc+H+9Ky3Gpfou7G",
	"JX570KCU4LNBzQx8dXZy9PEk6AWfz07N/49P3p6YP5yd/HH07sRjFa4Q3zztdd9Zb5nShm6eM6Lhh2dr",
	"Y4xxK8Ao0sB1wYilLbnOBSi1ksfEfCumHbx1RBIxNXstSSxFanmk8kPaTFZToStaSUyJe0g0XGs/ldB0",
	"1TTNPKY7S8FsX0G0oIpkUkR5aLloG/XWocjrW/sI9k7M4Rbu0G1chlTMYSePYZNFr4VZ0xrjuVRCEi32",
	"sui3XWlrix7RvL8JGoHSk02mNCiNwKMMFVfDJku0FygZblpYiVyGsPWaKygpN+jVTuHD0PurMxey2Yic",
	"JqC/ATcW6vs3pAj6tKVXXDWcTC1zaIcuIhR+UETlYQhK+a6FldOJK+9ZPlAdzpyVu6dcdZi5x93mbco4",
	"S1HPPz8Y7W7sHncauQNyGhORMq0h6pFcoQs+AzJj0xkoTeicsgStXfsJ2hPWozDs41Spu4B+GvVejHrP",
	"X/aejS78IBrUTliUwGZ6xcT8jCDnCmxcAM0RspgBJwmbA5kzWOBVU/o3QwnmmGgAhJrNwX/3S9SYUk/C",
	"mRQpQ9i/de9uXiWv3KuExhpk7fyF8aIFAa5yCYRpQiOaWZeaw4Ig1KWjjbAZnjC4nAGN4jzpmd3KX5IO",
	"9uz0Lo47vYqSbV48H23nY3yQAsXj5BrCbZm7CYz7ymDkGkJUMpSEIk0pj4hacsQ6F7lKlm1BpnLajBf9",
	"edEOf9qVqJzmKdoKg51uGaomUgjd2MR/jJxbz8biw0T6CH5KMsnmLIEpdBCJqkmuwGOxri5JUdaYQqmT",
	"uBT6mShrhUS0Y4T27B6D0CDayKmQRM0gSUqUo+Tk3Gu3hAvPWp+FvMJLvDLgntC6AfvUrWivT7cJ474D",
	"bL6hgM+72ctDzpJm31pB4RM+Z1Jw5Akyp5IhIEYGFehScTnU17BRcT6aUiLXEwWhx96h1yhIjqUL7xRl",
	"TUEoeKTWELDLoCjIebFJDJU98m5SiB+hQU7rQlcSrDxHWwijXBpDY5KqLk7D8xevIQ5SliSshoi28odr",
	"pieh10V3RyX4CsFX/CsoHYGUk8ufDvx+208HfeD4eUTsq+Qyj2MrWW3LSEdI6i0XE7nuXmyNEn3DkmQ/",
	"JTpmU04Ty71Whle4t0kyZV5vKLXg48nZu2D9unXv0b3+5vTt26AXnP7xMegFv3/6sNlpdHuvYeJxRhe8",
	"jockeR8Hh3+ud/08F9HNRWvRPUTjtOaP0kukLSUKV4OoG8OZL9T6flzq8tNjP9e65xPf5zaL1qcKUQgR",
	"YVXk1qOvSjcxz1nk52kqNUQTqv1uqHETrflUv4XcZzt4op101lTnakdqFJFRZT62CquTCmGWT7LQc74T",
	"pVlKNUTk1YdPJDfuegYyBK7ptK5QuMk3bdBIJ4UmIixu4GpGrZqy6Nqk7ntBCmlXrK6CGO1apDxJIcXr",
	"1kJfhvE6lKHXzv9Q0VQ3YkMy5xzJZ48NkV+suwkbMb6fIjummqK6WUhmPe8V1uMRlWg+ZLkn9BdRTbfS",
	"0VF9l8FGt7Vc92LjmW919SI4Lu2icLn2CfENDbyLSarsqHmBuNcHwU62/FhLoFUcdpdraHxCMrpMBEU2",
	"zSQo1FB8WlJQ5DrLNRqdCYshXIaJi+Oq21KzjNtVzIKn8N7m4A8Dvm2C1AqYoih4U+VbqYZSkdrFmSLn",
	"5sPzoEtkEX7PLWAjMPZxER02KAhnOb+qA2xNkaCwhbYUYptjBOnP7sSMMzXb7tqoEonFV12XxkZXxt6H",
	"7Z9VmRGtPa85VztcchW07qM9gV1RHubyrcPpUyLjUAJwNRP6DKbMlpTcQYDodxsYKvO6U2d/r8mCdoQM",
	"PptQwS4LbVlxYdf6T/S8sn4CMUqL5CBvU3uxw5remG2BhV6B2E0k2yeoJ0tCr7NqW4zhFdkxmDzLB5Ap",
	"U4oJrvaDaSpF7klK/AELYh65XJckvzXs112Tqp7qkp8ODp7uVkwiFtwXNEFYzSMTJing/dQB7zYJuMVM",
	"KGMdFrglVBrT5BJcNC/at9BjTUJ0jDrotfpMdXinpSplHZGxf3B1L2IkhLlUbA6bI19lYtWtR8pvk+UW",
	"UfPOHIDBwC0LXmJJU/DHuM+qy6l4CTVanCGDzkFKFoEiylYuOgw8RYrZyE5w+HxUi5c+86krrw9YlFx5",
	"vLfaDQSG1e6o7MYAfeziL6d8bAMv3UGrCo560MbFazZgZy1CUnptEv3sK5zyd792Q2CywsqVJ7z7dUuK",
	"PBuNRg2ibBnDHmuR3ZbRhAwB19ksL6dpChGjGpIlUVpkJlQsck2mkoYQ5wlRs1xHYsEH5OOMKZKaTIxx",
	"Ehg3wXEp8wxdwTmLQBhk+UPLu9R7WQlGgO6t2At/Ys6q1EyjBRW8AckhIacpnYIiRx9Og14wB6kssKPB",
	"s8HIaPsMOM1YcBi8GIwGL1zVgUH9sMjLDPMMPY8+XGvgRlP3KY/6LidjVKJQHivpk/mMCG6uilRIIOUS",
	"5CvLCJXhjM1B9fB3U8erZ5CSnCPShjORwvDKHGNYbT08z0ejFyFeQOZP0DvnCjSROTeR4GqHOKFThZSt",
	"DmJ+8mST5owSlWcg50wJGfUI5RFZUKbPOS6bGHKWbx/D/KMQCToaCVMa0KM/D0xlQcI4oAsiLo04ReQS",
	"Yjy3BJ1LbjSQS3ue88Bg3ymPqMTXSXnUIx6dORxb1Q5K/yqi5Uphd5onmmVU6iFa1X10WZq13U2JqlDp",
	"89SUsWqrd5B3LfkNTkw6D9V+LdfTXN5f0PNaJEhTYzZoQbKEhjbvX5FrN6qviMxR/wvtfx31fxlM+hff",
	"nvWev3zpt26+smyCct0G8UvFkASxS5mhF0XIMhpeQVRxQAX1kzRXqD7CJI+ApJSzGJQe/KUEf1r3cy4Z",
	"p3K50XopwXOVUb77u5lKW1mgRt0Lr56oXkYny2Zhqx6O56NnPl+75AbLChD1Klw4YQInNaVwMEUk0Mhk",
	"+w5Goy6DvNx+uNo/ctMLXm7zXbP5wnQi5GmK2PaqoJKaNSZ/QhUqJPXUHGFVPZg1zd65Bjm0HQKpyG0R",
	"RaH7mrJcdUCsld39mzLaLRZbkXfU1VRhuxnQHEeehehByTZmaZ5Qk7E2eG50XBBh4z0zodABtVRZoVEq",
	"5rCJRGVR1j1RqFX0dTsCuQopPNnDEuddUbOV1uFyIWWVQYhGUFQLH6htKKZKh7ybYh/pFVSO+z2RrR1/",
	"uHGEa9OptiFDQ2uY2XhZtdPmC6CVQK8AIGbRByX2K5rpXKIgVgQq7FsPOV1dvXOTw1mbhvWqrXuioK8w",
	"bHvZuxMQms0XHiJ/yiKTdCoaEULzpvMKb0Pxg9Evm79rtkrezUWL5+k6DrJGrIa27WhSVrQYNsl9t2ez",
	"Neu+rlB/A9i+ZlIVAbLnjApbP86T5GHNIHtSQk0dXIX+gi62F2kLuthmqfumS7uXbN+bsyKJPWJ0O8k6",
	"2PxdswP3LmhnsVHvpFilW+HPrCHZa+tT/NjUMuHsfwChDD1KGokFRx8EpWvylZk41hS0L26qc8kVoeTL",
	"6QcbqKu5obbIz5BLFfdvZWs1mldW6O/2P2byC8uM2yxpChqkMqU/W/eMFr4xekjFoUzNJ373dw5GHVjv",
	"vwjCN3mgVw9JbArqX+x0OTu83srsQqwXZywDeIax6gh+jHzpiFVXIYQWjOaOXPIrMt6kCCY6Rm1yVNkL",
	"tC0vbWy3+hFYaDelV/VDtRnJqLFas9UjZJnfQDfaxYryvBb1SrZJmNLmIlKdfFN1re2nhB4np1Sn9rBK",
	"ZZ8g/lyI8pHxiokZG8rbLEqbN0wLWpd9UvRs3WMQ5i5sExP0qOz5R0gncwLTpWOi8OuEWQKNSqvSK8tn",
	"QCNnU24nymazwpTA9X8UaRahBt2visJuZUMY1Y+nuzPX74GYBelb2aBm3FPBHAqsop/UKjc6pbtdQHNf",
	"UbvOSp19Jb62FMlttOYREnIM2tMKXiPd0BT1qBnLSgrbJE93XvcoScSiyAWZnCbjU7uFzUUm4C4EFxSW",
	"kAqnA+yogUFH7rMwD+4s2VlaJB3Zyn16fmtl1M6g3a4LuFCou+YEXT5wfWPv2qSgxcKd5QMNlcpU4GNX",
	"dZ4UYezstbo4FL772lIHasoajLzZ5i5b1cC0qpz3VqLE11PuEw7rvt+ZaOzK+lG9wK1Wr1E6zVpsJwf1",
	"FPwt8uPr5GFPxv7CsoqtawT8xzA5rZfdrLBoye+LInHjT8LVCyjv6zL31GhuT9OtQVhpAcHdvP1hnzj7",
	"OwdfYWElEwuHjq1qtVbqPE1xpyuieOyMZg9TjzQhrmw5r2qy2PBbgfIbi/MEbD3pKr+JrGK3FW/DeBDO",
	"ZXAOREnHdU7EZp/B0x5TEEpk2eMn1NhUSOKJTJWTxwtcJdLQNhR1+oS2vem1OrGvfUdarfp3Gq61hdbr",
	"2G0K7NXnZfny8+OTWpdQZdS6hivT3UAjc+pvwb/74/FJ/5WFrf/RO0bqHUSMmq4oXBCXN21HdjnyZFWJ",
	"PQ3q2Cl6klqqztOUdPMY2dQguoVlo1aoU7slx6JVvj4d9hlf2SZycVwzfWgrinF/0YteZ2F7XHZ7dDZ6",
	"NMaI/nRw0AWm6Y7oAGtte4gVvm1u/FvGVfZ0S4rOzEd/jRr/Em/OInNfJRUTMVXDCrH+WLuYunbTDj28",
	"whB2/NRazi0UTTGSsCyX9rY/+reJRZKIRYPzVqYPtZtaVskseLIkBZiExcXoLKaIA22NYHbfKrvsUzu7",
	"f7fqhYlrmw0e7EYrx/NtvMqQsX7o28t3MyDQRMxB4tZWQBzKh3BtJ8j4/ZjaXIv7qkPzTM74vmVo7ek1",
	"HiaoRslI984DViqdrB9V1SSwmRaykcJmQsn9krgxWeVhaFyfw+KTdDtY5QejLV1D3G/VyJab4RVLko2E",
	"foMvbeN21IbBrLvxNkx62d4W2oug9aFF35mlalMiPaz0/s2jzIOgKimnLhW3cjfHqXKIjtfAao7a+d5M",
	"d8+qxB7Kp0Xck0dZ0FKbdmOP1036iG1xrZi3/jHqpjFb6IGusNqoH98/91MfvfNofbpK+dhZROv5UOR6",
	"k6tXIU/keq3P90D66Ba+i2dw0kYvZmUkEpoZqzOR/j9Edw8huhpXi1yvuGTVaOAqzO/Xriv/Hsu9Fq23",
	"ZhN0d3p1zbj4B5SrZxLmzBjgxcSC+gCEFv1cNXGnPirKjeskXBtpLQOc5byEKtM2IJ9nwKvB2CZzbgdV",
	"lDOyXQSp/Lwr6GnUlz/kuWniwmYlZxA2TLODW9eQ1ean2DB1Q1WVT/uv3eiv/tHaEVwiriakteeGDchv",
	"OZWUa4DIjd45e/3qxYsXvwzWR8saoIxt7nIvSIqxl3sCgqA8Hz1fJ6IMdRJLEjNXS4qpBKV6JEuAKiBa",
	"LgmdUsZJQrWZZFVD9xlouewfxdo3EGmcT6e2OWBBmV4dQ1wb/CCXVgiqQ6wb5vIYb4Cyw8B2BSsji8D1",
	"dholYfYe6CwaLwbn2cqwW9igW/1TJ40xfe3Kqpa8FjMzZAnlnVVV0ySpL9tEW2v4iqdM476vUf8oKe8t",
	"+mydiBaDAR9f36vBQNkdXem1AXnPk6WpKqt0XQaSnB6TkHLUbxKmTGmQEBGKS9h/ZqtFZZGtI3JtwNK9",
	"0dgzxGl3Q8mVTTzsWAktsub1Yw7yfwEAAP//o/4I7tZ2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
