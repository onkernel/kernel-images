openapi: 3.1.0
info:
  title: Kernel Images API
  version: 0.1.0
paths:
  /recording/start:
    post:
      summary: Start a screen recording. Only one recording per ID can be registered at a time.
      operationId: startRecording
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartRecordingRequest"
      responses:
        "201":
          description: Recording started
        "400":
          $ref: "#/components/responses/BadRequestError"
        "409":
          description: A recording is already in progress
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalError"
  /process/exec:
    post:
      summary: Execute a command synchronously
      operationId: processExec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessExecRequest"
      responses:
        "200":
          description: Execution result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessExecResult"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /process/spawn:
    post:
      summary: Execute a command asynchronously
      operationId: processSpawn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessSpawnRequest"
      responses:
        "200":
          description: Spawned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessSpawnResult"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /process/{process_id}/status:
    get:
      summary: Get process status
      operationId: processStatus
      parameters:
        - name: process_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessStatus"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /process/{process_id}/stdout/stream:
    get:
      summary: Stream process stdout over SSE
      operationId: processStdoutStream
      parameters:
        - name: process_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: SSE stream of process output and lifecycle events
          headers:
            X-SSE-Content-Type:
              description: Media type of SSE data events (application/json)
              schema:
                type: string
                const: application/json
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/ProcessStreamEvent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /process/{process_id}/stdin:
    post:
      summary: Write to process stdin
      operationId: processStdin
      parameters:
        - name: process_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessStdinRequest"
      responses:
        "200":
          description: Bytes written
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessStdinResult"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /process/{process_id}/kill:
    post:
      summary: Send signal to process
      operationId: processKill
      parameters:
        - name: process_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessKillRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /recording/stop:
    post:
      summary: Stop the recording
      operationId: stopRecording
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopRecordingRequest"
      responses:
        "200":
          description: Recording stopped
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /recording/download:
    get:
      summary: Download the most recently recorded video file
      parameters:
        - name: id
          in: query
          description: Optional recorder identifier. When omitted, the server uses the default recorder.
          schema:
            type: string
            pattern: "^[a-zA-Z0-9-]+$"
      operationId: downloadRecording
      responses:
        "200":
          description: Recording file
          headers:
            # Note: using a `format: date-time` here doesn't work as intended as the generated code
            # calls a `fmt.Sprint` on the value when setting the header. time.String is a
            # non-standard format that most parses will barf on, making everyone's life harder, so
            # we're skipping the `format` in favor of an explicit description.
            X-Recording-Started-At:
              description: Timestamp of when the recording started. Guaranteed to be RFC3339.
              schema:
                type: string
            X-Recording-Finished-At:
              description: Timestamp of when the recording finished. Guaranteed to be RFC3339.
              schema:
                type: string
          content:
            video/mp4:
              schema:
                type: string
                format: binary
        "202":
          description: Recording is still in progress, please try again later
          headers:
            Retry-After:
              description: Suggested wait time in seconds before retrying
              schema:
                type: integer
                minimum: 1
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /recording/list:
    get:
      summary: List all recorders
      operationId: listRecorders
      responses:
        "200":
          description: List of recorders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecorderInfo"
        "500":
          $ref: "#/components/responses/InternalError"
  /recording/delete:
    post:
      summary: Delete a previously recorded video file
      operationId: deleteRecording
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRecordingRequest"
      responses:
        "200":
          description: Recording deleted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/click_mouse:
    post:
      summary: Simulate a mouse click action on the host computer
      operationId: clickMouse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClickMouseRequest"
      responses:
        "200":
          description: Mouse action performed
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/move_mouse:
    post:
      summary: Move the mouse cursor to the specified coordinates on the host computer
      operationId: moveMouse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveMouseRequest"
      responses:
        "200":
          description: Mouse cursor moved
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/screenshot:
    post:
      summary: Capture a screenshot of the host computer
      operationId: takeScreenshot
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenshotRequest"
      responses:
        "200":
          description: Screenshot image
          content:
            image/png:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/type:
    post:
      summary: Type text on the host computer
      operationId: typeText
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TypeTextRequest"
      responses:
        "200":
          description: Text typed successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/press_key:
    post:
      summary: Press one or more keys on the host computer
      description: |
        Presses the specified keys for an optional duration. Keys should be key symbols
        supported by xdotool. For a comprehensive list of key symbols, see
        the X11 keysym definitions at https://cgit.freedesktop.org/xorg/proto/x11proto/plain/keysymdef.h
        The server honors millisecond-level durations using fractional sleeps under the hood.
      operationId: pressKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PressKeyRequest"
      responses:
        "200":
          description: Keys pressed successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/scroll:
    post:
      summary: Scroll the mouse wheel at a position on the host computer
      description: |
        Scroll vertically and/or horizontally at the given coordinates, optionally while holding modifier keys.
        The scroll amounts are in logical ticks (not pixels) and application behavior may vary; tuning may be required.
        When both horizontal and vertical deltas are provided, the server applies them sequentially (vertical then horizontal)
        and batches wheel events using `xdotool click --repeat N --delay 0 <button>`.
      operationId: scroll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScrollRequest"
      responses:
        "200":
          description: Scroll performed
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/drag_mouse:
    post:
      summary: Drag the mouse along a path
      description: |
        Press and hold a mouse button, optionally wait for a short delay, then move along the given path and release.
        The path is a list of [x, y] coordinate pairs.
      operationId: dragMouse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DragMouseRequest"
      responses:
        "200":
          description: Drag performed
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /logs/stream:
    get:
      summary: Stream logs over SSE
      operationId: logsStream
      parameters:
        - in: query
          name: source
          required: true
          schema:
            type: string
            enum: [path, supervisor]
        - in: query
          name: follow
          required: false
          schema:
            type: boolean
            default: true
        - in: query
          description: only required if source is path
          name: path
          required: false
          schema:
            type: string
        - in: query
          name: supervisor_process
          description: only required if source is supervisor
          required: false
          schema:
            type: string
      responses:
        "200":
          description: SSE stream of logs
          headers:
            X-SSE-Content-Type:
              description: Media type of SSE data events (application/json)
              schema:
                type: string
                const: application/json
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/LogEvent"
  # File system operations
  /fs/read_file:
    get:
      summary: Read file contents
      operationId: readFile
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
            pattern: "^/.*"
          description: Absolute file path to read.
      responses:
        "200":
          description: File read successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/download_dir_zip:
    get:
      summary: Download a directory as a ZIP archive
      description: Returns a ZIP file containing the contents of the specified directory.
      operationId: downloadDirZip
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
            pattern: "^/.*"
          description: Absolute directory path to archive and download.
      responses:
        "200":
          description: ZIP archive of the requested directory
          content:
            application/zip:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/write_file:
    put:
      summary: Write or create a file
      operationId: writeFile
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
            pattern: "^/.*"
          description: Destination absolute file path.
        - name: mode
          in: query
          required: false
          schema:
            type: string
            pattern: "^[0-7]{3,4}$"
          description: Optional file mode (octal string, e.g. 644). Defaults to 644.
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: File written successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/upload:
    post:
      summary: Upload one or more files
      description: Allows uploading single or multiple files to the remote filesystem.
      operationId: uploadFiles
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: object
                    properties:
                      file:
                        type: string
                        format: binary
                      dest_path:
                        type: string
                        description: Absolute destination path to write the file.
                        pattern: "^/.*"
                    required: [file, dest_path]
              required: [files]
      responses:
        "201":
          description: Files uploaded successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/upload_zip:
    post:
      summary: Upload a zip archive and extract it
      description: Upload a zip file and extract its contents to the specified destination path.
      operationId: uploadZip
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                zip_file:
                  type: string
                  format: binary
                dest_path:
                  type: string
                  description: Absolute destination directory to extract the archive to.
                  pattern: "^/.*"
              required: [zip_file, dest_path]
      responses:
        "201":
          description: Zip uploaded and extracted successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/list_files:
    get:
      summary: List files in a directory
      operationId: listFiles
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
            pattern: "^/.*"
          description: Absolute directory path.
      responses:
        "200":
          description: Directory listing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFiles"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/create_directory:
    put:
      summary: Create a new directory
      operationId: createDirectory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDirectoryRequest"
      responses:
        "201":
          description: Directory created successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/delete_file:
    put:
      summary: Delete a file
      operationId: deleteFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePathRequest"
      responses:
        "200":
          description: File deleted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/delete_directory:
    put:
      summary: Delete a directory
      operationId: deleteDirectory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePathRequest"
      responses:
        "200":
          description: Directory deleted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/set_file_permissions:
    put:
      summary: Set file or directory permissions/ownership
      operationId: setFilePermissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetFilePermissionsRequest"
      responses:
        "200":
          description: Permissions updated
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/file_info:
    get:
      summary: Get information about a file or directory
      operationId: fileInfo
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
            pattern: "^/.*"
          description: Absolute path of the file or directory.
      responses:
        "200":
          description: File information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/move:
    put:
      summary: Move or rename a file or directory
      operationId: movePath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovePathRequest"
      responses:
        "200":
          description: Move successful
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/watch:
    post:
      summary: Watch a directory for changes
      operationId: startFsWatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartFsWatchRequest"
      responses:
        "201":
          description: Watch started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  watch_id:
                    type: string
                    description: Unique identifier for the directory watch
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/watch/{watch_id}/events:
    get:
      summary: Stream filesystem events for a watch
      operationId: streamFsEvents
      parameters:
        - name: watch_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: SSE stream of filesystem events
          headers:
            X-SSE-Content-Type:
              description: Media type of SSE data events (application/json)
              schema:
                type: string
                const: application/json
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/FileSystemEvent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /fs/watch/{watch_id}:
    delete:
      summary: Stop watching a directory
      operationId: stopFsWatch
      parameters:
        - name: watch_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Watch stopped successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /display:
    patch:
      summary: Update display configuration
      operationId: patchDisplay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDisplayRequest"
      responses:
        "200":
          description: Updated display configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisplayConfig"
        "409":
          $ref: "#/components/responses/ConflictError"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"

  /chromium/upload-extensions-and-restart:
    post:
      summary: Upload one or more unpacked extensions (as zips) and restart Chromium
      description: |
        Upload one or more extension zip archives, extract them under /home/kernel/extensions/<name>,
        set runtime extension flags in /chromium/flags, restart Chromium via supervisord, and wait
        until the Chromium DevTools "listening" log line is observed before returning success.
      operationId: uploadExtensionsAndRestart
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                extensions:
                  type: array
                  description: List of extensions to upload and activate
                  items:
                    type: object
                    properties:
                      zip_file:
                        type: string
                        format: binary
                        description: Zip archive containing an unpacked Chromium extension (must include manifest.json)
                      name:
                        type: string
                        description: Folder name to place the extension under /home/kernel/extensions/<name>
                        pattern: "^[A-Za-z0-9._-]{1,255}$"
                    required: [zip_file, name]
              required: [extensions]
      responses:
        "201":
          description: Extensions uploaded, Chromium restarted, and DevTools is ready
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"

  /chromium/flags:
    patch:
      summary: Update Chromium launch flags and restart
      description: |
        Merge new flags with existing ones, update /chromium/flags, restart Chromium via supervisord,
        and wait until the Chromium DevTools "listening" log line is observed before returning success.
      operationId: patchChromiumFlags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flags:
                  type: array
                  items:
                    type: string
                  description: Chromium flags to merge (e.g., ["--kiosk", "--disable-gpu"])
              required: [flags]
      responses:
        "200":
          description: Flags updated and Chromium restarted successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
components:
  schemas:
    StartRecordingRequest:
      type: object
      properties:
        maxFileSizeInMB:
          type: integer
          description: Maximum file size in MB (overrides server default)
          minimum: 10
          maximum: 10000
        framerate:
          type: integer
          description: Recording framerate in fps (overrides server default)
          minimum: 1
          maximum: 20
        maxDurationInSeconds:
          type: integer
          description: Maximum recording duration in seconds (overrides server default)
          minimum: 1
        id:
          type: string
          description: Optional identifier for the recording session. Alphanumeric or hyphen.
          pattern: "^[a-zA-Z0-9-]+$"
      additionalProperties: false
    StopRecordingRequest:
      type: object
      properties:
        forceStop:
          type: boolean
          description: Immediately stop without graceful shutdown. This may result in a corrupted video file.
          default: false
        id:
          type: string
          description: Identifier of the recorder to stop. Alphanumeric or hyphen.
          pattern: "^[a-zA-Z0-9-]+$"
      additionalProperties: false
    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
    RecorderInfo:
      type: object
      required: [id, isRecording]
      properties:
        id:
          type: string
        isRecording:
          type: boolean
        started_at:
          type: [string, "null"]
          format: date-time
          description: Timestamp when recording started
        finished_at:
          type: [string, "null"]
          format: date-time
          description: Timestamp when recording finished
    ClickMouseRequest:
      type: object
      required:
        - x
        - y
      properties:
        button:
          type: string
          description: Mouse button to interact with
          enum: [left, right, middle, back, forward]
        click_type:
          type: string
          description: Type of click action
          enum: [down, up, click]
        x:
          type: integer
          description: X coordinate of the click position
        y:
          type: integer
          description: Y coordinate of the click position
        hold_keys:
          type: array
          description: Modifier keys to hold during the click
          items:
            type: string
        num_clicks:
          type: integer
          description: Number of times to repeat the click
          default: 1
      additionalProperties: false
    MoveMouseRequest:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
          description: X coordinate to move the cursor to
        y:
          type: integer
          description: Y coordinate to move the cursor to
        hold_keys:
          type: array
          description: Modifier keys to hold during the move
          items:
            type: string
      additionalProperties: false
    ScreenshotRegion:
      type: object
      required:
        - x
        - y
        - width
        - height
      properties:
        x:
          type: integer
          description: X coordinate of the region's top-left corner
        y:
          type: integer
          description: Y coordinate of the region's top-left corner
        width:
          type: integer
          description: Width of the region in pixels
        height:
          type: integer
          description: Height of the region in pixels
      additionalProperties: false
    ScreenshotRequest:
      type: object
      properties:
        region:
          $ref: "#/components/schemas/ScreenshotRegion"
      additionalProperties: false
    TypeTextRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Text to type on the host computer
        delay:
          type: integer
          description: Delay in milliseconds between keystrokes
          minimum: 0
          default: 0
      additionalProperties: false
    PressKeyRequest:
      type: object
      required:
        - keys
      properties:
        keys:
          type: array
          description: |
            List of key symbols to press. Each item should be a key symbol supported by xdotool
            (see X11 keysym definitions). Examples include "Return", "Shift", "Ctrl", "Alt", "F5".
          items:
            type: string
        duration:
          type: integer
          description: Duration to hold the keys down in milliseconds. If omitted or 0, keys are tapped.
          minimum: 0
          default: 0
        hold_keys:
          type: array
          description: Optional modifier keys to hold during the key press sequence.
          items:
            type: string
      additionalProperties: false
    ScrollRequest:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
          description: X coordinate at which to perform the scroll
        y:
          type: integer
          description: Y coordinate at which to perform the scroll
        delta_x:
          type: integer
          description: Horizontal scroll amount. Positive scrolls right, negative scrolls left.
          default: 0
        delta_y:
          type: integer
          description: Vertical scroll amount. Positive scrolls down, negative scrolls up.
          default: 0
        hold_keys:
          type: array
          description: Modifier keys to hold during the scroll
          items:
            type: string
      additionalProperties: false
    DragMouseRequest:
      type: object
      required:
        - path
      properties:
        path:
          type: array
          description: Ordered list of [x, y] coordinate pairs to move through while dragging. Must contain at least 2 points.
          minItems: 2
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: integer
        button:
          type: string
          description: Mouse button to drag with
          enum: [left, middle, right]
        delay:
          type: integer
          description: Delay in milliseconds between button down and starting to move along the path.
          minimum: 0
          default: 0
        hold_keys:
          type: array
          description: Modifier keys to hold during the drag
          items:
            type: string
      additionalProperties: false
    StartFsWatchRequest:
      type: object
      required:
        - path
      properties:
        path:
          type: string
          description: Directory to watch.
        recursive:
          type: boolean
          description: Whether to watch recursively.
          default: false
      additionalProperties: false
    FileSystemEvent:
      type: object
      description: Filesystem change event.
      required: [type, path]
      properties:
        type:
          type: string
          enum: [CREATE, WRITE, DELETE, RENAME]
          description: Event type.
        name:
          type: string
          description: Base name of the file or directory affected.
        path:
          type: string
          description: Absolute path of the file or directory.
        is_dir:
          type: boolean
          description: Whether the affected path is a directory.
    DeleteRecordingRequest:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the recording to delete. Alphanumeric or hyphen.
          pattern: "^[a-zA-Z0-9-]+$"
      additionalProperties: false
    FileInfo:
      type: object
      required: [name, path, size_bytes, is_dir, mod_time, mode]
      properties:
        name:
          type: string
          description: Base name of the file or directory.
        path:
          type: string
          description: Absolute path.
        size_bytes:
          type: integer
          description: Size in bytes. 0 for directories.
        is_dir:
          type: boolean
          description: Whether the path is a directory.
        mod_time:
          type: string
          format: date-time
          description: Last modification time.
        mode:
          type: string
          description: File mode bits (e.g., "drwxr-xr-x" or "-rw-r--r--").

    ListFiles:
      type: array
      description: Array of file or directory information entries.
      items:
        $ref: "#/components/schemas/FileInfo"

    CreateDirectoryRequest:
      type: object
      required: [path]
      properties:
        path:
          type: string
          description: Absolute directory path to create.
          pattern: "^/.*"
        mode:
          type: string
          description: Optional directory mode (octal string, e.g. 755). Defaults to 755.
          pattern: "^[0-7]{3,4}$"
      additionalProperties: false

    DeletePathRequest:
      type: object
      required: [path]
      properties:
        path:
          type: string
          description: Absolute path to delete.
          pattern: "^/.*"
      additionalProperties: false

    SetFilePermissionsRequest:
      type: object
      required: [path, mode]
      properties:
        path:
          type: string
          description: Absolute path whose permissions are to be changed.
          pattern: "^/.*"
        owner:
          type: string
          description: New owner username or UID.
        group:
          type: string
          description: New group name or GID.
        mode:
          type: string
          description: File mode bits (octal string, e.g. 644).
          pattern: "^[0-7]{3,4}$"
      additionalProperties: false

    MovePathRequest:
      type: object
      required: [src_path, dest_path]
      properties:
        src_path:
          type: string
          description: Absolute source path.
          pattern: "^/.*"
        dest_path:
          type: string
          description: Absolute destination path.
          pattern: "^/.*"
      additionalProperties: false
    ProcessExecRequest:
      type: object
      description: Request to execute a command synchronously.
      required: [command]
      properties:
        command:
          type: string
          description: Executable or shell command to run.
        args:
          type: array
          description: Command arguments.
          items:
            type: string
          default: []
        cwd:
          type: [string, "null"]
          description: Working directory (absolute path) to run the command in.
          pattern: "^/.*"
        env:
          type: object
          description: Environment variables to set for the process.
          additionalProperties:
            type: string
          default: {}
        as_user:
          type: [string, "null"]
          description: Run the process as this user.
        as_root:
          type: boolean
          description: Run the process with root privileges.
          default: false
        timeout_sec:
          type: [integer, "null"]
          description: Maximum execution time in seconds.
      additionalProperties: false
    ProcessExecResult:
      type: object
      description: Result of a synchronous command execution.
      properties:
        exit_code:
          type: integer
          description: Process exit code.
        stdout_b64:
          type: string
          description: Base64-encoded stdout buffer.
        stderr_b64:
          type: string
          description: Base64-encoded stderr buffer.
        duration_ms:
          type: integer
          description: Execution duration in milliseconds.
      additionalProperties: false
    ProcessSpawnRequest:
      allOf:
        - $ref: "#/components/schemas/ProcessExecRequest"
    ProcessSpawnResult:
      type: object
      description: Information about a spawned process.
      properties:
        process_id:
          type: string
          format: uuid
          description: Server-assigned identifier for the process.
        pid:
          type: integer
          description: OS process ID.
        started_at:
          type: string
          format: date-time
          description: Timestamp when the process started.
      additionalProperties: false
    ProcessStatus:
      type: object
      description: Current status of a process.
      properties:
        state:
          type: string
          enum: [running, exited]
          description: Process state.
        exit_code:
          type: [integer, "null"]
          description: Exit code if the process has exited.
        cpu_pct:
          type: number
          description: Estimated CPU usage percentage.
        mem_bytes:
          type: integer
          description: Estimated resident memory usage in bytes.
      additionalProperties: false
    ProcessStdinRequest:
      type: object
      description: Data to write to the process standard input.
      required: [data_b64]
      properties:
        data_b64:
          type: string
          description: Base64-encoded data to write.
      additionalProperties: false
    ProcessStdinResult:
      type: object
      description: Result of writing to stdin.
      properties:
        written_bytes:
          type: integer
          description: Number of bytes written.
      additionalProperties: false
    ProcessKillRequest:
      type: object
      description: Signal to send to the process.
      required: [signal]
      properties:
        signal:
          type: string
          enum: [TERM, KILL, INT, HUP]
          default: TERM
          description: Signal to send.
      additionalProperties: false
    ProcessStreamEvent:
      type: object
      description: SSE payload representing process output or lifecycle events.
      properties:
        stream:
          type: string
          description: Source stream of the data chunk.
          enum: [stdout, stderr]
        data_b64:
          type: string
          description: Base64-encoded data from the process stream.
        event:
          type: string
          description: Lifecycle event type.
          enum: [exit]
        exit_code:
          type: integer
          description: Exit code when the event is "exit".
      additionalProperties: false
    PatchDisplayRequest:
      type: object
      properties:
        width:
          type: integer
          minimum: 320
          description: Display width in pixels
        height:
          type: integer
          minimum: 240
          description: Display height in pixels
        refresh_rate:
          type: integer
          enum: [60, 30, 25, 10]
          description: Display refresh rate in Hz. If omitted, uses the highest available rate for the resolution.
        require_idle:
          type: boolean
          description: If true, refuse to resize when live view or recording/replay is active.
          default: true
        restart_chromium:
          type: boolean
          description: If true, restart Chromium after resolution change to ensure it adapts to new size. Default is false for headful, true for headless.
      additionalProperties: false
    DisplayConfig:
      type: object
      properties:
        width:
          type: integer
          description: Current display width in pixels
        height:
          type: integer
          description: Current display height in pixels
        refresh_rate:
          type: integer
          description: Current display refresh rate in Hz (may be null if not detectable)
      additionalProperties: false
    LogEvent:
      type: object
      description: A log entry from the application.
      required: [message, timestamp]
      properties:
        timestamp:
          type: string
          format: date-time
          description: Time the log entry was produced.
        message:
          type: string
          description: Log message text.
    OkResponse:
      type: object
      description: Generic OK response.
      required: [ok]
      properties:
        ok:
          type: boolean
          description: Indicates success.
          default: true
      additionalProperties: false
  responses:
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
