openapi: 3.1.0
info:
  title: Kernel Images API
  version: 0.1.0
paths:
  /recording/start:
    post:
      summary: Start a screen recording. Only one recording per ID can be registered at a time.
      operationId: startRecording
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartRecordingRequest"
      responses:
        "201":
          description: Recording started
        "400":
          $ref: "#/components/responses/BadRequestError"
        "409":
          description: A recording is already in progress
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalError"
  /recording/stop:
    post:
      summary: Stop the recording
      operationId: stopRecording
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopRecordingRequest"
      responses:
        "200":
          description: Recording stopped
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /recording/download:
    get:
      summary: Download the most recently recorded video file
      parameters:
        - name: id
          in: query
          description: Optional recorder identifier. When omitted, the server uses the default recorder.
          schema:
            type: string
            pattern: "^[a-zA-Z0-9-]+$"
      operationId: downloadRecording
      responses:
        "200":
          description: Recording file
          headers:
            # Note: using a `format: date-time` here doesn't work as intended as the generated code
            # calls a `fmt.Sprint` on the value when setting the header. time.String is a
            # non-standard format that most parses will barf on, making everyone's life harder, so
            # we're skipping the `format` in favor of an explicit description.
            X-Recording-Started-At:
              description: Timestamp of when the recording started. Guaranteed to be RFC3339.
              schema:
                type: string
            X-Recording-Finished-At:
              description: Timestamp of when the recording finished. Guaranteed to be RFC3339.
              schema:
                type: string
          content:
            video/mp4:
              schema:
                type: string
                format: binary
        "202":
          description: Recording is still in progress, please try again later
          headers:
            Retry-After:
              description: Suggested wait time in seconds before retrying
              schema:
                type: integer
                minimum: 1
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /recording/list:
    get:
      summary: List all recorders
      operationId: listRecorders
      responses:
        "200":
          description: List of recorders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecorderInfo"
        "500":
          $ref: "#/components/responses/InternalError"
  /recording/delete:
    post:
      summary: Delete a previously recorded video file
      operationId: deleteRecording
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRecordingRequest"
      responses:
        "200":
          description: Recording deleted
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/click_mouse:
    post:
      summary: Simulate a mouse click action on the host computer
      operationId: clickMouse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClickMouseRequest"
      responses:
        "200":
          description: Mouse action performed
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  /computer/move_mouse:
    post:
      summary: Move the mouse cursor to the specified coordinates on the host computer
      operationId: moveMouse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveMouseRequest"
      responses:
        "200":
          description: Mouse cursor moved
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalError"
  # File system operations
  /fs/file:
    get:
      summary: Read file contents
      operationId: readFile
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
          description: Absolute or relative file path to read.
      responses:
        "200":
          description: File read successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      summary: Write or create a file
      operationId: writeFile
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
          description: Destination file path.
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: File written successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /fs/upload:
    post:
      summary: Upload one or more files
      operationId: uploadFiles
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: object
                    properties:
                      file:
                        type: string
                        format: binary
                      dest_path:
                        type: string
                    required: [file, dest_path]
              required: [files]
      responses:
        "201":
          description: Files uploaded successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /fs/download:
    get:
      summary: Download a file
      operationId: downloadFile
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /fs/watch:
    post:
      summary: Watch a directory for changes
      operationId: startFsWatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartFsWatchRequest"
      responses:
        "201":
          description: Watch started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  watch_id:
                    type: string
                    description: Unique identifier for the directory watch
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /fs/watch/{watch_id}/events:
    get:
      summary: Stream filesystem events for a watch
      operationId: streamFsEvents
      parameters:
        - name: watch_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: SSE stream of filesystem events
          headers:
            X-SSE-Content-Type:
              description: Media type of SSE data events (application/json)
              schema:
                type: string
                const: application/json
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/FileSystemEvent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /fs/watch/{watch_id}:
    delete:
      summary: Stop watching a directory
      operationId: stopFsWatch
      parameters:
        - name: watch_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Watch stopped successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
components:
  schemas:
    StartRecordingRequest:
      type: object
      properties:
        maxFileSizeInMB:
          type: integer
          description: Maximum file size in MB (overrides server default)
          minimum: 10
          maximum: 10000
        framerate:
          type: integer
          description: Recording framerate in fps (overrides server default)
          minimum: 1
          maximum: 20
        maxDurationInSeconds:
          type: integer
          description: Maximum recording duration in seconds (overrides server default)
          minimum: 1
        id:
          type: string
          description: Optional identifier for the recording session. Alphanumeric or hyphen.
          pattern: "^[a-zA-Z0-9-]+$"
      additionalProperties: false
    StopRecordingRequest:
      type: object
      properties:
        forceStop:
          type: boolean
          description: Immediately stop without graceful shutdown. This may result in a corrupted video file.
          default: false
        id:
          type: string
          description: Identifier of the recorder to stop. Alphanumeric or hyphen.
          pattern: "^[a-zA-Z0-9-]+$"
      additionalProperties: false
    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
    RecorderInfo:
      type: object
      required: [id, isRecording]
      properties:
        id:
          type: string
        isRecording:
          type: boolean
        started_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when recording started
        finished_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when recording finished
    ClickMouseRequest:
      type: object
      required:
        - x
        - y
      properties:
        button:
          type: string
          description: Mouse button to interact with
          enum: [left, right, middle, back, forward]
        click_type:
          type: string
          description: Type of click action
          enum: [down, up, click]
        x:
          type: integer
          description: X coordinate of the click position
        y:
          type: integer
          description: Y coordinate of the click position
        hold_keys:
          type: array
          description: Modifier keys to hold during the click
          items:
            type: string
        num_clicks:
          type: integer
          description: Number of times to repeat the click
          default: 1
      additionalProperties: false
    MoveMouseRequest:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
          description: X coordinate to move the cursor to
        y:
          type: integer
          description: Y coordinate to move the cursor to
        hold_keys:
          type: array
          description: Modifier keys to hold during the move
          items:
            type: string
      additionalProperties: false
    StartFsWatchRequest:
      type: object
      required:
        - path
      properties:
        path:
          type: string
          description: Directory to watch.
        recursive:
          type: boolean
          description: Whether to watch recursively.
          default: false
      additionalProperties: false
    FileSystemEvent:
      type: object
      description: Filesystem change event.
      required: [type, path]
      properties:
        type:
          type: string
          enum: [CREATE, WRITE, DELETE, RENAME]
          description: Event type.
        name:
          type: string
          description: Base name of the file or directory affected.
        path:
          type: string
          description: Absolute path of the file or directory.
        is_dir:
          type: boolean
          description: Whether the affected path is a directory.
    DeleteRecordingRequest:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the recording to delete. Alphanumeric or hyphen.
          pattern: "^[a-zA-Z0-9-]+$"
      additionalProperties: false
  responses:
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
